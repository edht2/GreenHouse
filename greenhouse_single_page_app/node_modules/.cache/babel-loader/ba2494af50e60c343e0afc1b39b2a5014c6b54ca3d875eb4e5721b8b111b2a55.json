{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { Chart, registerables } from 'chart.js';\n// *** Make sure you have run: npm install chartjs-adapter-date-fns date-fns ***\nimport 'chartjs-adapter-date-fns';\n// ***************************************************************************\nChart.register(...registerables);\n\n// Import base components if they are not globally registered\nimport BaseCard from '@/components/UI/BaseCard.vue';\nimport BaseButton from '@/components/UI/BaseButton.vue';\nimport ToDoIcon from '@/components/UI/icons/ToDoIcon.vue'; // Adjust path if necessary\n\nexport default {\n  components: {\n    BaseCard,\n    BaseButton,\n    ToDoIcon\n    // Register other components used in the template if needed\n  },\n  props: {\n    dataLabel: {\n      // Keep prop even if not used for data fetching *yet*\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      // Chart instances\n      hourlyChartInstance: null,\n      weeklyChartInstance: null,\n      // Sample data storage\n      hourlySampleData: [],\n      weeklyHourlySampleData: []\n    };\n  },\n  computed: {\n    // Formatter for the hourly chart data (uses explicit labels)\n    formattedHourlyChartData() {\n      if (!this.hourlySampleData || this.hourlySampleData.length === 0) {\n        return {\n          labels: [],\n          datasets: [{\n            label: 'Temperature (°C)',\n            data: []\n          }]\n        };\n      }\n      const labels = this.hourlySampleData.map(item => item.timeLabel);\n      const dataPoints = this.hourlySampleData.map(item => item.value);\n      return {\n        labels: labels,\n        // X-axis labels (e.g., \"14:00\")\n        datasets: [{\n          label: 'Temperature (°C)',\n          data: dataPoints,\n          // Y-axis values\n          borderColor: '#74ad7d',\n          backgroundColor: 'rgba(116, 173, 125, 0.2)',\n          tension: 0.1,\n          fill: true,\n          // --- Styling for 'x' markers (defined per dataset) ---\n          pointStyle: 'crossRot',\n          pointRadius: 6,\n          pointBorderWidth: 2,\n          pointBackgroundColor: 'rgba(0,0,0,0.5)'\n          // ----------------------------------------------------\n        }]\n      };\n    },\n    // Formatter for the weekly chart using HOURLY data points ({x, y})\n    formattedWeeklyChartData() {\n      if (!this.weeklyHourlySampleData || this.weeklyHourlySampleData.length === 0) {\n        return {\n          datasets: [{\n            label: 'Temperature (°C)',\n            data: []\n          }]\n        };\n      }\n      return {\n        // No separate labels array needed when using {x,y} format for time scale\n        datasets: [{\n          label: 'Temperature (°C)',\n          // Dataset label\n          data: this.weeklyHourlySampleData.map(item => ({\n            x: new Date(item.timestamp),\n            // Use Date object or timestamp for x\n            y: item.value // The temperature value for y\n          })),\n          borderColor: '#36A2EB',\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          tension: 0.1,\n          // Smoothes the line slightly\n          fill: true\n          // Point radius 0 to hide points is set in the chart options below\n        }]\n      };\n    }\n  },\n  methods: {\n    // Generates 24h of hourly data\n    generateHourlySampleData() {\n      const data = [];\n      const now = new Date(); // Current time\n      const baseTemp = 15;\n      const variation = 5;\n      for (let i = 23; i >= 0; i--) {\n        const timestamp = new Date(now.getTime() - i * 60 * 60 * 1000);\n        const temp = baseTemp + (Math.random() - 0.5) * 2 * variation;\n        data.push({\n          timestamp: timestamp.toISOString(),\n          value: parseFloat(temp.toFixed(1)),\n          timeLabel: timestamp.toLocaleTimeString(undefined, {\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false\n          })\n        });\n      }\n      this.hourlySampleData = data;\n    },\n    // Generates 7 days of HOURLY data\n    generateWeeklyHourlySampleData() {\n      const data = [];\n      const now = new Date(); // Current time\n      const hoursToGoBack = 7 * 24; // 168 hours\n      const baseTemp = 14;\n      const variation = 4;\n      // Removed unused firstTimestamp and lastTimestamp declarations\n\n      for (let i = hoursToGoBack - 1; i >= 0; i--) {\n        // Loop through hours\n        const timestamp = new Date(now.getTime() - i * 60 * 60 * 1000);\n        // Removed assignments to unused firstTimestamp/lastTimestamp\n        const temp = baseTemp + (Math.random() - 0.5) * 2 * variation;\n        data.push({\n          timestamp: timestamp.toISOString(),\n          // Store full timestamp\n          value: parseFloat(temp.toFixed(1))\n        });\n      }\n      this.weeklyHourlySampleData = data;\n    },\n    // Render hourly chart\n    renderHourlyChart() {\n      if (!this.$refs.hourlyChartCanvas) return;\n      const ctx = this.$refs.hourlyChartCanvas.getContext('2d');\n      if (this.hourlyChartInstance) this.hourlyChartInstance.destroy();\n      if (!this.hourlySampleData || this.hourlySampleData.length === 0) return;\n      const formattedData = this.formattedHourlyChartData;\n      if (!formattedData || !formattedData.datasets || !formattedData.datasets[0] || !formattedData.datasets[0].data || formattedData.datasets[0].data.length === 0) {\n        console.error(\"Formatted hourly data is invalid or empty!\");\n        return;\n      }\n      try {\n        this.hourlyChartInstance = new Chart(ctx, {\n          type: 'line',\n          data: formattedData,\n          // Use the local variable fixed the ReferenceError\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              x: {\n                title: {\n                  display: true,\n                  text: 'Time (Last 24h)'\n                }\n              },\n              y: {\n                beginAtZero: false,\n                title: {\n                  display: true,\n                  text: 'Temperature (°C)'\n                }\n              }\n            },\n            plugins: {\n              legend: {\n                display: false\n              },\n              title: {\n                display: true,\n                text: 'Hourly Temperature (°C)'\n              },\n              tooltip: {\n                enabled: true\n              }\n            }\n          }\n        });\n      } catch (error) {\n        console.error(\"Error creating hourly chart:\", error);\n      }\n    },\n    // Render weekly chart with HOURLY data points and time scale\n    renderWeeklyChart() {\n      if (!this.$refs.weeklyChartCanvas) return;\n      // Corrected: getContext from the specific ref\n      const ctx = this.$refs.weeklyChartCanvas.getContext('2d');\n      if (this.weeklyChartInstance) this.weeklyChartInstance.destroy();\n      if (!this.weeklyHourlySampleData || this.weeklyHourlySampleData.length === 0) return;\n\n      // *** Determine min/max timestamps from the actual data ***\n      // Convert ISO strings back to time values for comparison\n      const timestamps = this.weeklyHourlySampleData.map(d => new Date(d.timestamp).getTime());\n      // Add checks in case timestamps array is empty\n      const minTimestamp = timestamps.length ? Math.min(...timestamps) : null;\n      const maxTimestamp = timestamps.length ? Math.max(...timestamps) : null;\n      // *********************************************************\n\n      const formattedData = this.formattedWeeklyChartData;\n      if (!formattedData || !formattedData.datasets || !formattedData.datasets[0] || !formattedData.datasets[0].data || formattedData.datasets[0].data.length === 0) {\n        console.error(\"Formatted weekly data is invalid or empty!\");\n        return;\n      }\n\n      // Only proceed if min/max calculation was successful\n      if (minTimestamp === null || maxTimestamp === null) {\n        console.error(\"Could not determine min/max timestamps for weekly chart.\");\n        return;\n      }\n      try {\n        this.weeklyChartInstance = new Chart(ctx, {\n          type: 'line',\n          data: formattedData,\n          // Uses the {x, y} data structure\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                beginAtZero: false,\n                title: {\n                  display: true,\n                  text: 'Temperature (°C)'\n                }\n              },\n              x: {\n                type: 'time',\n                // *** Enable time scale ***\n                title: {\n                  display: true,\n                  text: 'Date / Time'\n                },\n                time: {\n                  unit: 'day',\n                  // Display labels primarily by day\n                  tooltipFormat: 'PPp' // Format for tooltips (e.g., Apr 13, 2025, 3:00 PM)\n                },\n                ticks: {\n                  source: 'auto',\n                  maxRotation: 45,\n                  minRotation: 45\n                },\n                // *** Explicitly set min/max for the axis ***\n                min: minTimestamp,\n                max: maxTimestamp\n                // ******************************************\n              }\n            },\n            plugins: {\n              legend: {\n                display: false\n              },\n              title: {\n                display: true,\n                text: 'Weekly Temperature Trend (°C)'\n              },\n              tooltip: {\n                enabled: true\n              }\n            },\n            elements: {\n              point: {\n                radius: 0 // *** Hide points on this chart ***\n              }\n            },\n            parsing: false,\n            // Optimization\n            normalized: true // Optimization\n          }\n        });\n      } catch (error) {\n        console.error(\"Error creating weekly chart:\", error);\n      }\n    }\n  },\n  created() {\n    // Generate both datasets immediately\n    this.generateHourlySampleData();\n    this.generateWeeklyHourlySampleData();\n  },\n  mounted() {\n    // Render charts after component is mounted\n    // Using nextTick ensures DOM elements (canvas) are definitely ready\n    this.$nextTick(() => {\n      this.renderHourlyChart();\n      this.renderWeeklyChart();\n    });\n  },\n  beforeUnmount() {\n    // Clean up both chart instances\n    if (this.hourlyChartInstance) this.hourlyChartInstance.destroy();\n    if (this.weeklyChartInstance) this.weeklyChartInstance.destroy();\n  }\n};","map":{"version":3,"names":["Chart","registerables","register","BaseCard","BaseButton","ToDoIcon","components","props","dataLabel","type","String","required","data","hourlyChartInstance","weeklyChartInstance","hourlySampleData","weeklyHourlySampleData","computed","formattedHourlyChartData","length","labels","datasets","label","map","item","timeLabel","dataPoints","value","borderColor","backgroundColor","tension","fill","pointStyle","pointRadius","pointBorderWidth","pointBackgroundColor","formattedWeeklyChartData","x","Date","timestamp","y","methods","generateHourlySampleData","now","baseTemp","variation","i","getTime","temp","Math","random","push","toISOString","parseFloat","toFixed","toLocaleTimeString","undefined","hour","minute","hour12","generateWeeklyHourlySampleData","hoursToGoBack","renderHourlyChart","$refs","hourlyChartCanvas","ctx","getContext","destroy","formattedData","console","error","options","responsive","maintainAspectRatio","scales","title","display","text","beginAtZero","plugins","legend","tooltip","enabled","renderWeeklyChart","weeklyChartCanvas","timestamps","d","minTimestamp","min","maxTimestamp","max","time","unit","tooltipFormat","ticks","source","maxRotation","minRotation","elements","point","radius","parsing","normalized","created","mounted","$nextTick","beforeUnmount"],"sources":["/home/alex/dev/GreenHouse/flaskapp/greenhouse_single_page_app/src/pages/greenhouse/GhDrillDown.vue"],"sourcesContent":["<template>\n  <div>\n    <base-card>\n      <h3>\n        <base-button>\n          <to-do-icon iconwidth=\"25\" class=\"icon\"></to-do-icon>\n          Drill Down on {{ dataLabel }}\n        </base-button>\n      </h3>\n    </base-card>\n\n    <base-card>\n      <h4>Last 24 Hours</h4>\n      <div class=\"chart-container hourly-chart-container\">\n        <canvas ref=\"hourlyChartCanvas\"></canvas>\n      </div>\n    </base-card>\n\n    <base-card>\n      <h4>Past 7 Days (Hourly Data)</h4>\n       <div class=\"chart-container weekly-chart-container\">\n            <canvas ref=\"weeklyChartCanvas\"></canvas>\n       </div>\n    </base-card>\n\n  </div>\n</template>\n\n<script>\nimport { Chart, registerables } from 'chart.js';\n// *** Make sure you have run: npm install chartjs-adapter-date-fns date-fns ***\nimport 'chartjs-adapter-date-fns';\n// ***************************************************************************\nChart.register(...registerables);\n\n// Import base components if they are not globally registered\nimport BaseCard from '@/components/UI/BaseCard.vue';\nimport BaseButton from '@/components/UI/BaseButton.vue';\nimport ToDoIcon from '@/components/UI/icons/ToDoIcon.vue'; // Adjust path if necessary\n\n\nexport default {\n  components: {\n      BaseCard,\n      BaseButton,\n      ToDoIcon\n      // Register other components used in the template if needed\n  },\n  props: {\n    dataLabel: { // Keep prop even if not used for data fetching *yet*\n      type: String,\n      required: true,\n    }\n  },\n  data() {\n    return {\n      // Chart instances\n      hourlyChartInstance: null,\n      weeklyChartInstance: null,\n      // Sample data storage\n      hourlySampleData: [],\n      weeklyHourlySampleData: [],\n    };\n  },\n  computed: {\n    // Formatter for the hourly chart data (uses explicit labels)\n    formattedHourlyChartData() {\n      if (!this.hourlySampleData || this.hourlySampleData.length === 0) {\n        return { labels: [], datasets: [{ label: 'Temperature (°C)', data: [] }] };\n      }\n      const labels = this.hourlySampleData.map(item => item.timeLabel);\n      const dataPoints = this.hourlySampleData.map(item => item.value);\n      return {\n        labels: labels, // X-axis labels (e.g., \"14:00\")\n        datasets: [\n          {\n            label: 'Temperature (°C)',\n            data: dataPoints, // Y-axis values\n            borderColor: '#74ad7d',\n            backgroundColor: 'rgba(116, 173, 125, 0.2)',\n            tension: 0.1,\n            fill: true,\n            // --- Styling for 'x' markers (defined per dataset) ---\n            pointStyle: 'crossRot',\n            pointRadius: 6,\n            pointBorderWidth: 2,\n            pointBackgroundColor: 'rgba(0,0,0,0.5)',\n            // ----------------------------------------------------\n          }\n        ]\n      };\n    },\n\n    // Formatter for the weekly chart using HOURLY data points ({x, y})\n    formattedWeeklyChartData() {\n       if (!this.weeklyHourlySampleData || this.weeklyHourlySampleData.length === 0) {\n         return { datasets: [{ label: 'Temperature (°C)', data: [] }] };\n       }\n       return {\n         // No separate labels array needed when using {x,y} format for time scale\n         datasets: [\n          {\n            label: 'Temperature (°C)', // Dataset label\n            data: this.weeklyHourlySampleData.map(item => ({\n                x: new Date(item.timestamp), // Use Date object or timestamp for x\n                y: item.value                // The temperature value for y\n            })),\n            borderColor: '#36A2EB',\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            tension: 0.1, // Smoothes the line slightly\n            fill: true,\n            // Point radius 0 to hide points is set in the chart options below\n          }\n        ]\n      };\n    }\n  },\n  methods: {\n    // Generates 24h of hourly data\n    generateHourlySampleData() {\n      const data = [];\n      const now = new Date(); // Current time\n      const baseTemp = 15;\n      const variation = 5;\n      for (let i = 23; i >= 0; i--) {\n        const timestamp = new Date(now.getTime() - i * 60 * 60 * 1000);\n        const temp = baseTemp + (Math.random() - 0.5) * 2 * variation;\n        data.push({\n          timestamp: timestamp.toISOString(),\n          value: parseFloat(temp.toFixed(1)),\n          timeLabel: timestamp.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit', hour12: false })\n        });\n      }\n      this.hourlySampleData = data;\n    },\n\n    // Generates 7 days of HOURLY data\n    generateWeeklyHourlySampleData() {\n       const data = [];\n       const now = new Date(); // Current time\n       const hoursToGoBack = 7 * 24; // 168 hours\n       const baseTemp = 14;\n       const variation = 4;\n       // Removed unused firstTimestamp and lastTimestamp declarations\n\n       for (let i = hoursToGoBack - 1; i >= 0; i--) { // Loop through hours\n         const timestamp = new Date(now.getTime() - i * 60 * 60 * 1000);\n         // Removed assignments to unused firstTimestamp/lastTimestamp\n         const temp = baseTemp + (Math.random() - 0.5) * 2 * variation;\n         data.push({\n           timestamp: timestamp.toISOString(), // Store full timestamp\n           value: parseFloat(temp.toFixed(1)),\n         });\n       }\n       this.weeklyHourlySampleData = data;\n    },\n\n    // Render hourly chart\n    renderHourlyChart() {\n      if (!this.$refs.hourlyChartCanvas) return;\n      const ctx = this.$refs.hourlyChartCanvas.getContext('2d');\n      if (this.hourlyChartInstance) this.hourlyChartInstance.destroy();\n      if (!this.hourlySampleData || this.hourlySampleData.length === 0) return;\n\n      const formattedData = this.formattedHourlyChartData;\n      if (!formattedData || !formattedData.datasets || !formattedData.datasets[0] || !formattedData.datasets[0].data || formattedData.datasets[0].data.length === 0) {\n           console.error(\"Formatted hourly data is invalid or empty!\");\n           return;\n      }\n\n      try {\n          this.hourlyChartInstance = new Chart(ctx, {\n            type: 'line',\n            data: formattedData, // Use the local variable fixed the ReferenceError\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              scales: {\n                x: { title: { display: true, text: 'Time (Last 24h)' } },\n                y: { beginAtZero: false, title: { display: true, text: 'Temperature (°C)' } },\n              },\n              plugins: {\n                legend: { display: false },\n                title: { display: true, text: 'Hourly Temperature (°C)' },\n                tooltip: { enabled: true }\n              }\n            }\n          });\n      } catch (error) {\n           console.error(\"Error creating hourly chart:\", error);\n      }\n    },\n\n    // Render weekly chart with HOURLY data points and time scale\n    renderWeeklyChart() {\n        if (!this.$refs.weeklyChartCanvas) return;\n        // Corrected: getContext from the specific ref\n        const ctx = this.$refs.weeklyChartCanvas.getContext('2d');\n        if (this.weeklyChartInstance) this.weeklyChartInstance.destroy();\n        if (!this.weeklyHourlySampleData || this.weeklyHourlySampleData.length === 0) return;\n\n        // *** Determine min/max timestamps from the actual data ***\n        // Convert ISO strings back to time values for comparison\n        const timestamps = this.weeklyHourlySampleData.map(d => new Date(d.timestamp).getTime());\n        // Add checks in case timestamps array is empty\n        const minTimestamp = timestamps.length ? Math.min(...timestamps) : null;\n        const maxTimestamp = timestamps.length ? Math.max(...timestamps) : null;\n        // *********************************************************\n\n        const formattedData = this.formattedWeeklyChartData;\n        if (!formattedData || !formattedData.datasets || !formattedData.datasets[0] || !formattedData.datasets[0].data || formattedData.datasets[0].data.length === 0) {\n           console.error(\"Formatted weekly data is invalid or empty!\");\n           return;\n        }\n\n        // Only proceed if min/max calculation was successful\n        if (minTimestamp === null || maxTimestamp === null) {\n            console.error(\"Could not determine min/max timestamps for weekly chart.\");\n            return;\n        }\n\n        try {\n            this.weeklyChartInstance = new Chart(ctx, {\n                type: 'line',\n                data: formattedData, // Uses the {x, y} data structure\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                     scales: {\n                         y: {\n                             beginAtZero: false,\n                             title: { display: true, text: 'Temperature (°C)'}\n                         },\n                         x: {\n                             type: 'time', // *** Enable time scale ***\n                             title: { display: true, text: 'Date / Time'},\n                             time: {\n                                 unit: 'day', // Display labels primarily by day\n                                 tooltipFormat: 'PPp', // Format for tooltips (e.g., Apr 13, 2025, 3:00 PM)\n                             },\n                             ticks: {\n                                 source: 'auto',\n                                 maxRotation: 45,\n                                 minRotation: 45\n                             },\n                             // *** Explicitly set min/max for the axis ***\n                             min: minTimestamp,\n                             max: maxTimestamp\n                             // ******************************************\n                         }\n                    },\n                     plugins: {\n                        legend: { display: false },\n                        title: { display: true, text: 'Weekly Temperature Trend (°C)'},\n                        tooltip: { enabled: true }\n                     },\n                     elements: {\n                         point:{\n                             radius: 0 // *** Hide points on this chart ***\n                         }\n                     },\n                     parsing: false, // Optimization\n                     normalized: true, // Optimization\n                }\n            });\n        } catch(error) {\n             console.error(\"Error creating weekly chart:\", error);\n        }\n    }\n  },\n  created() {\n    // Generate both datasets immediately\n    this.generateHourlySampleData();\n    this.generateWeeklyHourlySampleData();\n  },\n  mounted() {\n    // Render charts after component is mounted\n    // Using nextTick ensures DOM elements (canvas) are definitely ready\n    this.$nextTick(() => {\n        this.renderHourlyChart();\n        this.renderWeeklyChart();\n    });\n  },\n  beforeUnmount() {\n    // Clean up both chart instances\n    if (this.hourlyChartInstance) this.hourlyChartInstance.destroy();\n    if (this.weeklyChartInstance) this.weeklyChartInstance.destroy();\n  },\n}\n</script>\n\n<style scoped>\n.icon {\n  margin-right: 10px;\n}\n\n/* Style the container div to control chart size */\n.chart-container {\n  position: relative; /* Needed for responsive chart sizing */\n  width: 350px;\n  height: 200px;\n  margin: 20px auto; /* Add vertical margin between elements/cards */\n}\n\n/* Canvas itself should fill the container */\ncanvas {\n  display: block; /* Prevents extra space below canvas */\n  width: 100%;\n  height: 100%;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}