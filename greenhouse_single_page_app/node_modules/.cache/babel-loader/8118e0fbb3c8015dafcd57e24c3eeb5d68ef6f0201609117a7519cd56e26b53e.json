{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"sensor-grid\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_sensor_icon = _resolveComponent(\"sensor-icon\");\n  const _component_base_button = _resolveComponent(\"base-button\");\n  const _component_base_card = _resolveComponent(\"base-card\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_base_card, null, {\n    default: _withCtx(() => [_createElementVNode(\"h3\", null, [_createVNode(_component_base_button, null, {\n      default: _withCtx(() => [_createVNode(_component_sensor_icon, {\n        iconwidth: \"20\",\n        class: \"icon\"\n      }), _cache[0] || (_cache[0] = _createTextVNode(\"Sensor Health Check\"))]),\n      _: 1 /* STABLE */\n    })]), _createVNode(_component_base_card, null, {\n      default: _withCtx(() => _cache[1] || (_cache[1] = [_createElementVNode(\"p\", null, \"We have 10 sensors attached to two Raspberry pi's in the greenhouse detecting 14 variables. Climate zone 1 has 3 soil moisture sensors, CO², relative humidity and air temperature sensors. \", -1 /* HOISTED */), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Climate zone 2 has 5 soil moisture sensors, CO², relative humidity and air temperature.\", -1 /* HOISTED */), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"One additional sensor is attached directly to the controller pi in the boiler room which senses barometric pressure. \", -1 /* HOISTED */)])),\n      _: 1 /* STABLE */\n    }), _createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.sensors, sensor => {\n      return _openBlock(), _createBlock(_component_base_card, {\n        key: sensor.id,\n        title: sensor.title,\n        class: _normalizeClass({\n          'out-of-service': !$options.isSensorServiceable(sensor)\n        })\n      }, {\n        default: _withCtx(() => [_cache[4] || (_cache[4] = _createElementVNode(\"p\", null, null, -1 /* HOISTED */)), _createElementVNode(\"p\", null, [_createTextVNode(\" Current Value: \" + _toDisplayString(sensor.currentValue !== null ? sensor.currentValue : 'No data') + \" \", 1 /* TEXT */), sensor.expectedRange ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, \" (\" + _toDisplayString(sensor.expectedRange.min) + \" - \" + _toDisplayString(sensor.expectedRange.max) + \") \", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"p\", null, \" Data Pulled (24h): \" + _toDisplayString(sensor.dataPulled) + \" / \" + _toDisplayString(sensor.dataExpected), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createTextVNode(\" Value in Range: \")), _createElementVNode(\"span\", {\n          class: _normalizeClass({\n            'in-range': sensor.inRange\n          })\n        }, _toDisplayString(sensor.inRange ? 'Yes' : 'No'), 3 /* TEXT, CLASS */)]), !$options.isDataPullSufficient(sensor) ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, [...(_cache[3] || (_cache[3] = [_createElementVNode(\"span\", {\n          class: \"warning\"\n        }, \"Low Data Pulled\", -1 /* HOISTED */)]))])) : _createCommentVNode(\"v-if\", true)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"title\", \"class\"]);\n    }), 128 /* KEYED_FRAGMENT */))])]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_createVNode","_component_base_card","default","_withCtx","_createElementVNode","_component_base_button","_component_sensor_icon","iconwidth","_createTextVNode","_","_cache","_hoisted_1","_Fragment","_renderList","$data","sensors","sensor","_createBlock","id","title","_normalizeClass","$options","isSensorServiceable","_toDisplayString","currentValue","expectedRange","_hoisted_2","min","max","_createCommentVNode","dataPulled","dataExpected","inRange","isDataPullSufficient","_hoisted_3"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/pages/greenhouse/SensorStatus.vue"],"sourcesContent":["<template>\n    <div>\n        <base-card>\n        <h3><base-button><sensor-icon iconwidth=\"20\" class=\"icon\"></sensor-icon>Sensor Health Check</base-button></h3>\n        <base-card>\n            <p>We have 10 sensors attached to two Raspberry pi's in the greenhouse detecting 14 variables. Climate zone 1 has 3 soil moisture sensors, CO², relative humidity and air temperature sensors. </p>\n            <br>\n            <p>Climate zone 2 has 5 soil moisture sensors, CO², relative humidity and air temperature.</p> \n            <br>\n            <p>One additional sensor is attached directly to the controller pi in the boiler room which senses barometric pressure. </p>\n        </base-card>\n        <div class=\"sensor-grid\">\n      <base-card\n        v-for=\"sensor in sensors\"\n        :key=\"sensor.id\"\n        :title=\"sensor.title\"\n        :class=\"{ 'out-of-service': !isSensorServiceable(sensor) }\"\n      >\n        <template #default>\n          <p></p>  \n          <p>\n            Current Value: {{ sensor.currentValue !== null ? sensor.currentValue : 'No data' }}\n            <span v-if=\"sensor.expectedRange\">\n              ({{ sensor.expectedRange.min }} - {{ sensor.expectedRange.max }})\n            </span>\n          </p>\n          <p>\n            Data Pulled (24h): {{ sensor.dataPulled }} / {{ sensor.dataExpected }}\n          </p>\n          <p>\n            Value in Range: <span :class=\"{ 'in-range': sensor.inRange }\">{{ sensor.inRange ? 'Yes' : 'No' }}</span>\n          </p>\n          <p v-if=\"!isDataPullSufficient(sensor)\">\n            <span class=\"warning\">Low Data Pulled</span>\n          </p>\n        </template>\n      </base-card>\n    </div>\n        </base-card>\n    </div>\n</template>\n\n<script>\n\n\nexport default {\n    data() {\n    return {\n      sensors: [\n        {\n          id: 'soil-moisture-1',\n          title: 'Soil Moisture - Bed 1',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-2',\n          title: 'Soil Moisture - Bed 2',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-3',\n          title: 'Soil Moisture - Bed 3',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-4',\n          title: 'Soil Moisture - Bed 4',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-5',\n          title: 'Soil Moisture - Bed 5',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-6',\n          title: 'Soil Moisture - Bed 6',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-7',\n          title: 'Soil Moisture - Bed 7',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-8',\n          title: 'Soil Moisture - Bed 8',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'relative-humidity-1',\n          title: 'Relative Humidity Sensor 1',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 30, max: 90 }, // Keeping the previous example range\n          inRange: true,\n        },\n        {\n          id: 'relative-humidity-2',\n          title: 'Relative Humidity Sensor 2',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 35, max: 85 }, // Keeping the previous example range\n          inRange: true,\n        },\n        {\n          id: 'co2-sensor-1',\n          title: 'CO₂ Sensor 1',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 400, max: 1000 }, // Keeping the previous example range\n          inRange: true,\n        },\n        {\n          id: 'co2-sensor-2',\n          title: 'CO₂ Sensor 2',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 450, max: 950 }, // Keeping the previous example range\n          inRange: true,\n        },\n        {\n          id: 'temperature-sensor-1',\n          title: 'Temperature Sensor 1',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 15, max: 30 }, // Keeping the previous example range\n          inRange: true,\n        },\n        {\n          id: 'temperature-sensor-2',\n          title: 'Temperature Sensor 2',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 18, max: 27 }, // Keeping the previous example range\n          inRange: true,\n        },\n      ],\n      dataPullThresholdPercentage: 90,\n    };\n  },\n  methods: {\n    isWithinRange(value, range) {\n      return range && value !== null && value >= range.min && value <= range.max;\n    },\n    isDataPullSufficient(sensor) {\n      const percentagePulled = (sensor.dataPulled / sensor.dataExpected) * 100;\n      return percentagePulled >= this.dataPullThresholdPercentage;\n    },\n    isSensorServiceable(sensor) {\n      return this.isWithinRange(sensor.currentValue, sensor.expectedRange) && this.isDataPullSufficient(sensor);\n    },\n    updateSensorData(sensorId, newValue) {\n      const sensor = this.sensors.find(s => s.id === sensorId);\n      if (sensor) {\n        sensor.currentValue = newValue;\n        sensor.dataPulled++;\n        sensor.inRange = this.isWithinRange(newValue, sensor.expectedRange);\n      }\n    },\n    simulateSensorReading(sensor) {\n      if (!sensor.expectedRange) return null;\n      const range = sensor.expectedRange.max - sensor.expectedRange.min;\n      const baseValue = sensor.expectedRange.min + range / 2;\n      const fluctuation = Math.random() * range * 0.6 - range * 0.3;\n      return parseFloat((baseValue + fluctuation).toFixed(2));\n    }\n  },\n  mounted() {\n    setInterval(() => {\n      this.sensors.forEach(sensor => {\n        const newValue = this.simulateSensorReading(sensor);\n        this.updateSensorData(sensor.id, newValue);\n      });\n    }, 30000);\n  },\n  \n}\n</script>\n\n<style scoped>\n.icon {\n  margin-right: 10px;\n}\n</style>"],"mappings":";;EAWaA,KAAK,EAAC;AAAa;;EAXhCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;;;uBACIC,mBAAA,CAsCM,cArCFC,YAAA,CAoCYC,oBAAA;IAtCpBC,OAAA,EAAAC,QAAA,CAGQ,MAA8G,CAA9GC,mBAAA,CAA8G,aAA1GJ,YAAA,CAAqGK,sBAAA;MAHjHH,OAAA,EAAAC,QAAA,CAGyB,MAAuD,CAAvDH,YAAA,CAAuDM,sBAAA;QAA1CC,SAAS,EAAC,IAAI;QAACV,KAAK,EAAC;oCAH3DW,gBAAA,CAGgF,qBAAmB,G;MAHnGC,CAAA;UAIQT,YAAA,CAMYC,oBAAA;MAVpBC,OAAA,EAAAC,QAAA,CAKY,MAAmMO,MAAA,QAAAA,MAAA,OAAnMN,mBAAA,CAAmM,WAAhM,8LAA4L,qBAC/LA,mBAAA,CAAI,qCACJA,mBAAA,CAA8F,WAA3F,yFAAuF,qBAC1FA,mBAAA,CAAI,qCACJA,mBAAA,CAA4H,WAAzH,uHAAqH,oB;MATpIK,CAAA;QAWQL,mBAAA,CA0BE,OA1BFO,UA0BE,I,kBAzBJZ,mBAAA,CAwBYa,SAAA,QApClBC,WAAA,CAayBC,KAAA,CAAAC,OAAO,EAAjBC,MAAM;2BADfC,YAAA,CAwBYhB,oBAAA;QAtBTH,GAAG,EAAEkB,MAAM,CAACE,EAAE;QACdC,KAAK,EAAEH,MAAM,CAACG,KAAK;QACnBtB,KAAK,EAhBduB,eAAA;UAAA,mBAgBqCC,QAAA,CAAAC,mBAAmB,CAACN,MAAM;QAAA;;QAE5Cd,OAAO,EAAAC,QAAA,CAChB,MAAO,C,0BAAPC,mBAAA,CAAO,qCACPA,mBAAA,CAKI,YAzBdI,gBAAA,CAoBa,kBACc,GAAAe,gBAAA,CAAGP,MAAM,CAACQ,YAAY,YAAYR,MAAM,CAACQ,YAAY,gBAAe,GACnF,iBAAYR,MAAM,CAACS,aAAa,I,cAAhC1B,mBAAA,CAEO,QAxBnB2B,UAAA,EAsB8C,IAC/B,GAAAH,gBAAA,CAAGP,MAAM,CAACS,aAAa,CAACE,GAAG,IAAG,KAAG,GAAAJ,gBAAA,CAAGP,MAAM,CAACS,aAAa,CAACG,GAAG,IAAG,IAClE,mBAxBZC,mBAAA,e,GA0BUzB,mBAAA,CAEI,WAFD,sBACkB,GAAAmB,gBAAA,CAAGP,MAAM,CAACc,UAAU,IAAG,KAAG,GAAAP,gBAAA,CAAGP,MAAM,CAACe,YAAY,kBAErE3B,mBAAA,CAEI,Y,0BA/BdI,gBAAA,CA6Ba,mBACe,IAAAJ,mBAAA,CAAwF;UAAjFP,KAAK,EA9BxCuB,eAAA;YAAA,YA8BwDJ,MAAM,CAACgB;UAAO;4BAAOhB,MAAM,CAACgB,OAAO,uC,IAEvEX,QAAA,CAAAY,oBAAoB,CAACjB,MAAM,K,cAArCjB,mBAAA,CAEI,KAlCdmC,UAAA,OAAAxB,MAAA,QAAAA,MAAA,OAiCYN,mBAAA,CAA4C;UAAtCP,KAAK,EAAC;QAAS,GAAC,iBAAe,oB,QAjCjDgC,mBAAA,e;QAAApB,CAAA;;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}