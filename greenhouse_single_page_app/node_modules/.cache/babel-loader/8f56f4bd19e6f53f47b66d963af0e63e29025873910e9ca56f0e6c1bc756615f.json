{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nexport default {\n  props: {\n    greenLowerLimit: {\n      type: Number,\n      required: true\n    },\n    greenUpperLimit: {\n      type: Number,\n      required: true\n    },\n    zoneDegrees: {\n      type: Array,\n      required: false\n    },\n    currentCondition: {\n      type: Number,\n      required: false,\n      default: null\n    },\n    title: {\n      type: String,\n      required: true,\n      validator: function (value) {\n        // Optional: Ensure only valid titles are passed\n        return ['VPD', 'CO²', '°C'].includes(value);\n      }\n    }\n  },\n  computed: {\n    unitsPerDegree() {\n      const unitsPerDegree = (this.greenUpperLimit - this.greenLowerLimit) / this.sumZoneDegrees;\n      return unitsPerDegree;\n    },\n    sumZoneDegrees() {\n      return this.zoneDegrees.reduce((sum, val) => sum + val, 0);\n    },\n    greenLowLimit() {\n      return this.greenLowerLimit;\n    },\n    greenUpLimit() {\n      return this.greenUpperLimit;\n    },\n    amberLowerLimit() {\n      const amberZone = this.unitsPerDegree * this.zoneDegrees[1];\n      return this.greenLowerLimit - amberZone;\n    },\n    amberUpperLimit() {\n      const amberZone = this.unitsPerDegree * this.zoneDegrees[1];\n      return this.greenUpperLimit + amberZone;\n    },\n    redLowerLimit() {\n      const redZone = this.unitsPerDegree * this.zoneDegrees[2];\n      return this.amberLowerLimit - redZone;\n    },\n    redUpperLimit() {\n      const redZone = this.unitsPerDegree * this.zoneDegrees[2];\n      return this.amberUpperLimit + redZone;\n    },\n    baseArc() {\n      const centerX = 100;\n      const centerY = 100;\n      const radius = 80;\n      const startAngle = -150;\n      const endAngle = 150;\n      return this.describeArc(centerX, centerY, radius, startAngle, endAngle);\n    },\n    greenArc() {\n      const centerX = 100;\n      const centerY = 100;\n      const radiusOuter = 80;\n      const radiusInner = 80 - 25;\n      const startAngle = -this.zoneDegrees[0] / 2;\n      const endAngle = this.zoneDegrees[0] / 2;\n      return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle);\n    },\n    amberArcClockwise() {\n      const centerX = 100;\n      const centerY = 100;\n      const radiusOuter = 80;\n      const radiusInner = 80 - 25;\n      const startAngle = this.zoneDegrees[0] / 2;\n      const endAngle = startAngle + this.zoneDegrees[1];\n      return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle);\n    },\n    amberArcCounterClockwise() {\n      const centerX = 100;\n      const centerY = 100;\n      const radiusOuter = 80;\n      const radiusInner = 80 - 25;\n      const startAngle = -this.zoneDegrees[0] / 2;\n      const endAngle = startAngle - this.zoneDegrees[1];\n      return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle, true);\n    },\n    redArcClockwise() {\n      const centerX = 100;\n      const centerY = 100;\n      const radiusOuter = 80;\n      const radiusInner = 80 - 25;\n      const startAngle = this.zoneDegrees[0] / 2 + this.zoneDegrees[1];\n      const endAngle = startAngle + this.zoneDegrees[2];\n      return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle);\n    },\n    redArcCounterClockwise() {\n      const centerX = 100;\n      const centerY = 100;\n      const radiusOuter = 80;\n      const radiusInner = 80 - 25;\n      const startAngle = -this.zoneDegrees[0] / 2 - this.zoneDegrees[1];\n      const endAngle = startAngle - this.zoneDegrees[2];\n      return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle, true);\n    },\n    needleTransform() {\n      const rotation = this.calculateNeedleRotation();\n      return `translate(100, 100) rotate(${rotation}) translate(0, 15)`;\n    }\n  },\n  methods: {\n    polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n      const angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n      return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n      };\n    },\n    describeArc(x, y, radius, startAngle, endAngle) {\n      const start = this.polarToCartesian(x, y, radius, endAngle);\n      const end = this.polarToCartesian(x, y, radius, startAngle);\n      const largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n      const d = [\"M\", start.x, start.y, \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(\" \");\n      return d;\n    },\n    describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle, isCounterClockwise = false) {\n      let startOuter, endOuter, startInner, endInner;\n      const largeArcFlag = Math.abs(endAngle - startAngle) <= 180 ? \"0\" : \"1\";\n      const outerSweepFlag = !isCounterClockwise ? \"1\" : \"0\"; // Clockwise: 1, Counter-Clockwise: 0\n      const innerSweepFlag = !isCounterClockwise ? \"0\" : \"1\"; // Clockwise: 0, Counter-Clockwise: 1\n\n      if (isCounterClockwise) {\n        startOuter = this.polarToCartesian(centerX, centerY, radiusOuter, startAngle);\n        endOuter = this.polarToCartesian(centerX, centerY, radiusOuter, endAngle);\n        startInner = this.polarToCartesian(centerX, centerY, radiusInner, startAngle);\n        endInner = this.polarToCartesian(centerX, centerY, radiusInner, endAngle);\n      } else {\n        // Correcting the order of startAngle and endAngle for clockwise\n        startOuter = this.polarToCartesian(centerX, centerY, radiusOuter, startAngle);\n        endOuter = this.polarToCartesian(centerX, centerY, radiusOuter, endAngle);\n        startInner = this.polarToCartesian(centerX, centerY, radiusInner, startAngle);\n        endInner = this.polarToCartesian(centerX, centerY, radiusInner, endAngle);\n      }\n      const d = [\"M\", startOuter.x, startOuter.y, \"A\", radiusOuter, radiusOuter, 0, largeArcFlag, outerSweepFlag, endOuter.x, endOuter.y, \"L\", endInner.x, endInner.y, \"A\", radiusInner, radiusInner, 0, largeArcFlag, innerSweepFlag, startInner.x, startInner.y, \"Z\"].join(\" \");\n      return d;\n    },\n    calculateNeedleRotation() {\n      const lowerLimit = this.greenLowerLimit;\n      const upperLimit = this.greenUpperLimit;\n      const current = this.currentCondition;\n      const greenDegrees = this.zoneDegrees[0];\n\n      // Map the current value to the green zone range (-greenDegrees/2 to greenDegrees/2)\n      const percentage = (current - lowerLimit) / (upperLimit - lowerLimit);\n      const rotation = (percentage - 0.5) * greenDegrees; // Subtract 0.5 to center around 12 o'clock\n\n      return rotation;\n    }\n  }\n};","map":{"version":3,"names":["props","greenLowerLimit","type","Number","required","greenUpperLimit","zoneDegrees","Array","currentCondition","default","title","String","validator","value","includes","computed","unitsPerDegree","sumZoneDegrees","reduce","sum","val","greenLowLimit","greenUpLimit","amberLowerLimit","amberZone","amberUpperLimit","redLowerLimit","redZone","redUpperLimit","baseArc","centerX","centerY","radius","startAngle","endAngle","describeArc","greenArc","radiusOuter","radiusInner","describeFilledArc","amberArcClockwise","amberArcCounterClockwise","redArcClockwise","redArcCounterClockwise","needleTransform","rotation","calculateNeedleRotation","methods","polarToCartesian","angleInDegrees","angleInRadians","Math","PI","x","cos","y","sin","start","end","largeArcFlag","d","join","isCounterClockwise","startOuter","endOuter","startInner","endInner","abs","outerSweepFlag","innerSweepFlag","lowerLimit","upperLimit","current","greenDegrees","percentage"],"sources":["/home/alex/dev/greenhouse_single_page_app/src/components/greenhouse/TheCircularDial.vue"],"sourcesContent":["<template>\n    <span class=\"circular-dial\">\n        <svg width=\"120\" height=\"120\" viewBox=\"0 0 200 200\">\n            <text\n                x=\"100\"\n                y=\"105\" text-anchor=\"middle\"\n                dominant-baseline=\"middle\"\n                font-family=\"sans-serif\"\n                font-size=\"40\" font-weight=\"bold\"\n                fill=\"grey\"\n                opacity=\"0.8\" >\n                {{ title }}\n            </text>\n            <path :d=\"greenArc\" fill=\"green\" stroke=\"none\" />\n            <path :d=\"amberArcClockwise\" fill=\"orange\" stroke=\"none\" stroke-width=\"25\" />\n            <path :d=\"amberArcCounterClockwise\" fill=\"orange\" stroke=\"none\" stroke-width=\"25\" />\n            <path :d=\"redArcClockwise\" fill=\"red\" stroke=\"none\" stroke-width=\"25\" />\n            <path :d=\"redArcCounterClockwise\" fill=\"red\" stroke=\"none\" stroke-width=\"25\" />\n\n            <path d=\"M 0 -80 L -4 -15 L 0 0 L 4 -15 Z\" fill=\"currentColor\" stroke=\"black\" stroke-width=\"2\" :transform=\"needleTransform\" />\n        </svg>\n\n        <p>Current {{ title }}: {{ currentCondition !== null ? currentCondition.toFixed(1) : 'N/A' }}</p>\n        <p>lower limit: {{ greenLowLimit.toFixed(1) }}</p>\n        <p>upper limit: {{ greenUpLimit.toFixed(1) }}</p>\n        \n    </span>\n</template>\n\n<script>\nexport default {\n    props: {\n        greenLowerLimit: {\n            type: Number,\n            required: true,\n        },\n        greenUpperLimit: {\n            type: Number,\n            required: true,\n        },\n        zoneDegrees: {\n            type: Array,\n            required: false,\n        },\n        currentCondition: {\n            type: Number,\n            required: false,\n            default: null\n        },\n        title: {\n            type: String,\n            required: true,\n            validator: function (value) {\n                // Optional: Ensure only valid titles are passed\n                return ['VPD', 'CO²', '°C'].includes(value);\n            }\n        }\n    },\n    computed: {\n        unitsPerDegree() {\n            const unitsPerDegree = (this.greenUpperLimit - this.greenLowerLimit) / this.sumZoneDegrees;\n            return unitsPerDegree;\n        },\n        sumZoneDegrees() {\n            return this.zoneDegrees.reduce((sum, val) => sum + val, 0);\n        },\n        greenLowLimit() {\n            return this.greenLowerLimit;\n        },\n        greenUpLimit() {\n            return this.greenUpperLimit;\n        },\n        amberLowerLimit() {\n            const amberZone = this.unitsPerDegree * this.zoneDegrees[1];\n            return this.greenLowerLimit - amberZone;\n        },\n        amberUpperLimit() {\n            const amberZone = this.unitsPerDegree * this.zoneDegrees[1];\n            return this.greenUpperLimit + amberZone;\n        },\n        redLowerLimit() {\n            const redZone = this.unitsPerDegree * this.zoneDegrees[2];\n            return this.amberLowerLimit - redZone;\n        },\n        redUpperLimit() {\n            const redZone = this.unitsPerDegree * this.zoneDegrees[2];\n            return this.amberUpperLimit + redZone;\n        },\n        baseArc() {\n            const centerX = 100;\n            const centerY = 100;\n            const radius = 80;\n            const startAngle = -150;\n            const endAngle = 150;\n            return this.describeArc(centerX, centerY, radius, startAngle, endAngle);\n        },\n        greenArc() {\n            const centerX = 100;\n            const centerY = 100;\n            const radiusOuter = 80;\n            const radiusInner = 80 - 25;\n            const startAngle = -this.zoneDegrees[0] / 2;\n            const endAngle = this.zoneDegrees[0] / 2;\n            return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle);\n        },\n        amberArcClockwise() {\n            const centerX = 100;\n            const centerY = 100;\n            const radiusOuter = 80;\n            const radiusInner = 80 - 25;\n            const startAngle = this.zoneDegrees[0] / 2;\n            const endAngle = startAngle + this.zoneDegrees[1];\n            return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle);\n        },\n        amberArcCounterClockwise() {\n            const centerX = 100;\n            const centerY = 100;\n            const radiusOuter = 80;\n            const radiusInner = 80 - 25;\n            const startAngle = -this.zoneDegrees[0] / 2;\n            const endAngle = startAngle - this.zoneDegrees[1];\n            return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle, true);\n        },\n        redArcClockwise() {\n            const centerX = 100;\n            const centerY = 100;\n            const radiusOuter = 80;\n            const radiusInner = 80 - 25;\n            const startAngle = this.zoneDegrees[0] / 2 + this.zoneDegrees[1];\n            const endAngle = startAngle + this.zoneDegrees[2];\n            return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle);\n        },\n        redArcCounterClockwise() {\n            const centerX = 100;\n            const centerY = 100;\n            const radiusOuter = 80;\n            const radiusInner = 80 - 25;\n            const startAngle = -this.zoneDegrees[0] / 2 - this.zoneDegrees[1];\n            const endAngle = startAngle - this.zoneDegrees[2];\n            return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle, true);\n        },\n        needleTransform() {\n            const rotation = this.calculateNeedleRotation();\n            return `translate(100, 100) rotate(${rotation}) translate(0, 15)`;\n        },\n    },\n    methods: {\n        polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n            const angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n            return {\n                x: centerX + (radius * Math.cos(angleInRadians)),\n                y: centerY + (radius * Math.sin(angleInRadians))\n            };\n        },\n        describeArc(x, y, radius, startAngle, endAngle) {\n            const start = this.polarToCartesian(x, y, radius, endAngle);\n            const end = this.polarToCartesian(x, y, radius, startAngle);\n            const largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n            const d = [\n                \"M\", start.x, start.y,\n                \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y\n            ].join(\" \");\n            return d;\n        },\n        describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle, isCounterClockwise = false) {\n            let startOuter, endOuter, startInner, endInner;\n            const largeArcFlag = Math.abs(endAngle - startAngle) <= 180 ? \"0\" : \"1\";\n            const outerSweepFlag = !isCounterClockwise ? \"1\" : \"0\"; // Clockwise: 1, Counter-Clockwise: 0\n            const innerSweepFlag = !isCounterClockwise ? \"0\" : \"1\"; // Clockwise: 0, Counter-Clockwise: 1\n\n            if (isCounterClockwise) {\n                startOuter = this.polarToCartesian(centerX, centerY, radiusOuter, startAngle);\n                endOuter = this.polarToCartesian(centerX, centerY, radiusOuter, endAngle);\n                startInner = this.polarToCartesian(centerX, centerY, radiusInner, startAngle);\n                endInner = this.polarToCartesian(centerX, centerY, radiusInner, endAngle);\n            } else {\n                // Correcting the order of startAngle and endAngle for clockwise\n                startOuter = this.polarToCartesian(centerX, centerY, radiusOuter, startAngle);\n                endOuter = this.polarToCartesian(centerX, centerY, radiusOuter, endAngle);\n                startInner = this.polarToCartesian(centerX, centerY, radiusInner, startAngle);\n                endInner = this.polarToCartesian(centerX, centerY, radiusInner, endAngle);\n            }\n\n            const d = [\n                \"M\", startOuter.x, startOuter.y,\n                \"A\", radiusOuter, radiusOuter, 0, largeArcFlag, outerSweepFlag, endOuter.x, endOuter.y,\n                \"L\", endInner.x, endInner.y,\n                \"A\", radiusInner, radiusInner, 0, largeArcFlag, innerSweepFlag, startInner.x, startInner.y,\n                \"Z\"\n            ].join(\" \");\n            return d;\n        },\n        calculateNeedleRotation() {\n            const lowerLimit = this.greenLowerLimit;\n            const upperLimit = this.greenUpperLimit;\n            const current = this.currentCondition;\n            const greenDegrees = this.zoneDegrees[0];\n            \n\n            // Map the current value to the green zone range (-greenDegrees/2 to greenDegrees/2)\n            const percentage = (current - lowerLimit) / (upperLimit - lowerLimit);\n            const rotation = (percentage-0.5) * greenDegrees; // Subtract 0.5 to center around 12 o'clock\n            \n\n            return rotation;\n        },\n    }\n}\n</script>\n\n<style scoped>\n.circular-dial {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.circular-dial p {\n    font-size: 0.5em; /* Adjusted font size for better readability */\n    margin: 5px 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}