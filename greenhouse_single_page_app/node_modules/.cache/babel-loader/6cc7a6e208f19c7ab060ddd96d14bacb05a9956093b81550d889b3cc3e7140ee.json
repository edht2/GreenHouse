{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"ping-indicator\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    class: \"segment segment-red\",\n    style: _normalizeStyle({\n      width: $options.redPercentage + '%'\n    })\n  }, null, 4 /* STYLE */), _createElementVNode(\"div\", {\n    class: \"segment segment-orange\",\n    style: _normalizeStyle({\n      marginLeft: $options.redPercentage + '%',\n      width: $options.orangePercentage + '%'\n    })\n  }, null, 4 /* STYLE */), _createElementVNode(\"div\", {\n    class: \"segment segment-green\",\n    style: _normalizeStyle({\n      marginLeft: $options.redPercentage + $options.orangePercentage + '%',\n      width: $options.greenPercentage + '%'\n    })\n  }, null, 4 /* STYLE */), _createElementVNode(\"div\", {\n    class: \"ping-marker\",\n    style: _normalizeStyle({\n      left: $options.pingPercentage + '%'\n    })\n  }, null, 4 /* STYLE */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","style","_normalizeStyle","width","$options","redPercentage","marginLeft","orangePercentage","greenPercentage","left","pingPercentage"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/components/UI/SensorFreqGauge.vue"],"sourcesContent":["<template>\n  <div class=\"ping-indicator\">\n    <div\n      class=\"segment segment-red\"\n      :style=\"{ width: redPercentage + '%' }\"\n    ></div>\n    <div\n      class=\"segment segment-orange\"\n      :style=\"{ marginLeft: redPercentage + '%', width: orangePercentage + '%' }\"\n    ></div>\n    <div\n      class=\"segment segment-green\"\n      :style=\"{ marginLeft: redPercentage + orangePercentage + '%', width: greenPercentage + '%' }\"\n    ></div>\n    <div\n      class=\"ping-marker\"\n      :style=\"{ left: pingPercentage + '%' }\"\n    ></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SensorFreqGauge', // Using your component name\n  props: {\n    successfulPings: {\n      type: Number,\n      required: true,\n    },\n    totalExpectedPings: {\n      type: Number,\n      required: true,\n    },\n  },\n  computed: {\n    pingPercentage() {\n      if (this.totalExpectedPings === 0) {\n        return 0;\n      }\n      return (this.successfulPings / this.totalExpectedPings) * 100;\n    },\n    redPercentage() {\n      const threshold = 0.85; // 85%\n      return Math.max(0, Math.min(100, threshold * 100)); // Red always goes to 85%\n    },\n    orangePercentage() {\n      const startThreshold = 0.85; // 85%\n      const endThreshold = 0.95;   // 95%\n      const start = startThreshold * 100;\n      const end = endThreshold * 100;\n\n      return Math.max(0, Math.min(100, end - start)); // Orange is always the range 85% to 95%\n    },\n    greenPercentage() {\n      return Math.max(0, 100 - (0.95 * 100)); // Green is always from 95% to 100%\n    },\n  },\n};\n</script>\n\n<style scoped>\n.ping-indicator {\n  position: relative; /* For absolute positioning of the marker */\n  display: flex;\n  width: 300px; /* Adjust as needed */\n  height: 30px;  /* Adjust as needed */\n  border: 1px solid #ccc; /* Optional border */\n  overflow: hidden; /* To contain the color segments */\n}\n\n.segment {\n  height: 100%;\n  \n}\n\n.segment-red {\n  background-color: red;\n  width: 85%; /* Red always takes up to 85% */\n}\n\n.segment-orange {\n  background-color: orange;\n  width: calc(95% - 85%); /* Orange is from 85% to 95% */\n}\n\n.segment-green {\n  background-color: green;\n  width: calc(100% - 95%); /* Green is from 95% to 100% */\n}\n\n.ping-marker {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 3px; /* Thickness of the line */\n  background-color: black;\n  z-index: 10; /* Ensure it's on top */\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;uBAA3BC,mBAAA,CAiBM,OAjBNC,UAiBM,GAhBJC,mBAAA,CAGO;IAFLH,KAAK,EAAC,qBAAqB;IAC1BI,KAAK,EAJZC,eAAA;MAAAC,KAAA,EAIuBC,QAAA,CAAAC,aAAa;IAAA;2BAEhCL,mBAAA,CAGO;IAFLH,KAAK,EAAC,wBAAwB;IAC7BI,KAAK,EARZC,eAAA;MAAAI,UAAA,EAQ4BF,QAAA,CAAAC,aAAa;MAAAF,KAAA,EAAeC,QAAA,CAAAG,gBAAgB;IAAA;2BAEpEP,mBAAA,CAGO;IAFLH,KAAK,EAAC,uBAAuB;IAC5BI,KAAK,EAZZC,eAAA;MAAAI,UAAA,EAY4BF,QAAA,CAAAC,aAAa,GAAGD,QAAA,CAAAG,gBAAgB;MAAAJ,KAAA,EAAeC,QAAA,CAAAI,eAAe;IAAA;2BAEtFR,mBAAA,CAGO;IAFLH,KAAK,EAAC,aAAa;IAClBI,KAAK,EAhBZC,eAAA;MAAAO,IAAA,EAgBsBL,QAAA,CAAAM,cAAc;IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}