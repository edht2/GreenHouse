{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"ping-indicator\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"segment segment-red\"\n  }, null, -1 /* HOISTED */)), _cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n    class: \"segment segment-orange\"\n  }, null, -1 /* HOISTED */)), _cache[2] || (_cache[2] = _createElementVNode(\"div\", {\n    class: \"segment segment-green\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: \"ping-marker\",\n    style: _normalizeStyle({\n      left: `calc(Math.min(pingPercentage, 100) * (100% - ${$options.markerThickness}px) / 100)`\n    })\n  }, null, 4 /* STYLE */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","style","_normalizeStyle","left","$options","markerThickness"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/components/UI/SensorFreqGauge.vue"],"sourcesContent":["<template>\n  <div class=\"ping-indicator\">\n    <div class=\"segment segment-red\"></div>\n    <div class=\"segment segment-orange\"></div>\n    <div class=\"segment segment-green\"></div>\n    <div\n      class=\"ping-marker\"\n      :style=\"{ left: `calc(Math.min(pingPercentage, 100) * (100% - ${markerThickness}px) / 100)` }\"\n    ></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SensorFreqGauge',\n  props: {\n    successfulPings: {\n      type: Number,\n      required: true,\n    },\n    totalExpectedPings: {\n      type: Number,\n      required: true,\n    },\n  },\n  computed: {\n    pingPercentage() {\n      if (this.totalExpectedPings === 0) {\n        console.log('totalExpected pings is zero')\n        return 0;\n      }\n      return (this.successfulPings / this.totalExpectedPings) * 100;\n      \n    },\n    markerThickness() {\n      return 5; // Matches the width set in your CSS\n    },\n  },\n};\n</script>\n\n<style scoped>\n.ping-indicator {\n  position: relative;\n  display: flex;\n  width: 300px; /* Adjust as needed */\n  height: 30px;  /* Adjust as needed */\n  border: 0px solid #ccc; /* Optional border */\n  overflow: hidden;\n}\n\n.segment {\n  height: 100%;\n  flex-shrink: 0;\n  position: absolute; /* Use absolute positioning for precise layout */\n}\n\n.segment-red {\n  background-color: red;\n  left: 0;\n  width: 85%;\n}\n\n.segment-orange {\n  background-color: orange;\n  left: 85%;\n  width: 10%;\n}\n\n.segment-green {\n  background-color: green;\n  left: 95%;\n  width: 5%;\n}\n\n.ping-marker {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 5px; /* Increased width to 5px */\n  background-color: black;\n  z-index: 10;\n  /* The 'left' position will still be dynamic based on pingPercentage */\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;uBAA3BC,mBAAA,CAQM,OARNC,UAQM,G,0BAPJC,mBAAA,CAAuC;IAAlCH,KAAK,EAAC;EAAqB,6B,0BAChCG,mBAAA,CAA0C;IAArCH,KAAK,EAAC;EAAwB,6B,0BACnCG,mBAAA,CAAyC;IAApCH,KAAK,EAAC;EAAuB,6BAClCG,mBAAA,CAGO;IAFLH,KAAK,EAAC,aAAa;IAClBI,KAAK,EAPZC,eAAA;MAAAC,IAAA,kDAOsEC,QAAA,CAAAC,eAAe;IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}