{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nexport default {\n  data() {\n    return {\n      sensors: [{\n        id: 'soil-moisture-1',\n        title: 'Soil Moisture - Bed 1',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 10,\n          max: 90\n        },\n        inRange: true\n      }, {\n        id: 'soil-moisture-2',\n        title: 'Soil Moisture - Bed 2',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 10,\n          max: 90\n        },\n        inRange: true\n      }, {\n        id: 'soil-moisture-3',\n        title: 'Soil Moisture - Bed 3',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 10,\n          max: 90\n        },\n        inRange: true\n      }, {\n        id: 'soil-moisture-4',\n        title: 'Soil Moisture - Bed 4',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 10,\n          max: 90\n        },\n        inRange: true\n      }, {\n        id: 'soil-moisture-5',\n        title: 'Soil Moisture - Bed 5',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 10,\n          max: 90\n        },\n        inRange: true\n      }, {\n        id: 'soil-moisture-6',\n        title: 'Soil Moisture - Bed 6',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 10,\n          max: 90\n        },\n        inRange: true\n      }, {\n        id: 'soil-moisture-7',\n        title: 'Soil Moisture - Bed 7',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 10,\n          max: 90\n        },\n        inRange: true\n      }, {\n        id: 'soil-moisture-8',\n        title: 'Soil Moisture - Bed 8',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 10,\n          max: 90\n        },\n        inRange: true\n      }, {\n        id: 'relative-humidity-1',\n        title: 'Relative Humidity Sensor 1',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 30,\n          max: 90\n        },\n        // Keeping the previous example range\n        inRange: true\n      }, {\n        id: 'relative-humidity-2',\n        title: 'Relative Humidity Sensor 2',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 35,\n          max: 85\n        },\n        // Keeping the previous example range\n        inRange: true\n      }, {\n        id: 'co2-sensor-1',\n        title: 'CO₂ Sensor 1',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 400,\n          max: 1000\n        },\n        // Keeping the previous example range\n        inRange: true\n      }, {\n        id: 'co2-sensor-2',\n        title: 'CO₂ Sensor 2',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 450,\n          max: 950\n        },\n        // Keeping the previous example range\n        inRange: true\n      }, {\n        id: 'temperature-sensor-1',\n        title: 'Temperature Sensor 1',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 15,\n          max: 30\n        },\n        // Keeping the previous example range\n        inRange: true\n      }, {\n        id: 'temperature-sensor-2',\n        title: 'Temperature Sensor 2',\n        dataPulled: 0,\n        dataExpected: 2880,\n        currentValue: null,\n        expectedRange: {\n          min: 18,\n          max: 27\n        },\n        // Keeping the previous example range\n        inRange: true\n      }],\n      dataPullThresholdPercentage: 90\n    };\n  },\n  methods: {\n    isWithinRange(value, range) {\n      return range && value !== null && value >= range.min && value <= range.max;\n    },\n    isDataPullSufficient(sensor) {\n      const percentagePulled = sensor.dataPulled / sensor.dataExpected * 100;\n      return percentagePulled >= this.dataPullThresholdPercentage;\n    },\n    isSensorServiceable(sensor) {\n      return this.isWithinRange(sensor.currentValue, sensor.expectedRange) && this.isDataPullSufficient(sensor);\n    },\n    updateSensorData(sensorId, newValue) {\n      const sensor = this.sensors.find(s => s.id === sensorId);\n      if (sensor) {\n        sensor.currentValue = newValue;\n        sensor.dataPulled++;\n        sensor.inRange = this.isWithinRange(newValue, sensor.expectedRange);\n      }\n    },\n    simulateSensorReading(sensor) {\n      if (!sensor.expectedRange) return null;\n      const range = sensor.expectedRange.max - sensor.expectedRange.min;\n      const baseValue = sensor.expectedRange.min + range / 2;\n      const fluctuation = Math.random() * range * 0.6 - range * 0.3;\n      return parseFloat((baseValue + fluctuation).toFixed(2));\n    }\n  },\n  mounted() {\n    setInterval(() => {\n      this.sensors.forEach(sensor => {\n        const newValue = this.simulateSensorReading(sensor);\n        this.updateSensorData(sensor.id, newValue);\n      });\n    }, 30000);\n  }\n};","map":{"version":3,"names":["data","sensors","id","title","dataPulled","dataExpected","currentValue","expectedRange","min","max","inRange","dataPullThresholdPercentage","methods","isWithinRange","value","range","isDataPullSufficient","sensor","percentagePulled","isSensorServiceable","updateSensorData","sensorId","newValue","find","s","simulateSensorReading","baseValue","fluctuation","Math","random","parseFloat","toFixed","mounted","setInterval","forEach"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/pages/greenhouse/SensorStatus.vue"],"sourcesContent":["<template>\n    <div>\n        <base-card>\n        <h3><base-button><sensor-icon iconwidth=\"20\" class=\"icon\"></sensor-icon>Sensor Health Check</base-button></h3>\n        <base-card>\n            <p>We have 10 sensors attached to two Raspberry pi's in the greenhouse detecting 14 variables. Climate zone 1 has 3 soil moisture sensors, CO², relative humidity and air temperature sensors. </p>\n            <br>\n            <p>Climate zone 2 has 5 soil moisture sensors, CO², relative humidity and air temperature.</p> \n            <br>\n            <p>One additional sensor is attached directly to the controller pi in the boiler room which senses barometric pressure. </p>\n        </base-card>\n        <div class=\"sensor-grid\">\n      <base-card\n        v-for=\"sensor in sensors\"\n        :key=\"sensor.id\"\n        :title=\"sensor.title\"\n        :class=\"{ 'out-of-service': !isSensorServiceable(sensor) }\"\n      >\n        <template #default>\n          <p>Sensor Title: {{ sensor.title }}</p>  \n          <p>\n            Current Value: {{ sensor.currentValue !== null ? sensor.currentValue : 'No data' }}\n            <span v-if=\"sensor.expectedRange\">\n              ({{ sensor.expectedRange.min }} - {{ sensor.expectedRange.max }})\n            </span>\n          </p>\n          <p>\n            Data Pulled (24h): {{ sensor.dataPulled }} / {{ sensor.dataExpected }}\n          </p>\n          <p>\n            Value in Range: <span :class=\"{ 'in-range': sensor.inRange }\">{{ sensor.inRange ? 'Yes' : 'No' }}</span>\n          </p>\n          <p v-if=\"!isDataPullSufficient(sensor)\">\n            <span class=\"warning\">Low Data Pulled</span>\n          </p>\n        </template>\n      </base-card>\n    </div>\n        </base-card>\n    </div>\n</template>\n\n<script>\n\n\nexport default {\n    data() {\n    return {\n      sensors: [\n        {\n          id: 'soil-moisture-1',\n          title: 'Soil Moisture - Bed 1',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-2',\n          title: 'Soil Moisture - Bed 2',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-3',\n          title: 'Soil Moisture - Bed 3',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-4',\n          title: 'Soil Moisture - Bed 4',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-5',\n          title: 'Soil Moisture - Bed 5',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-6',\n          title: 'Soil Moisture - Bed 6',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-7',\n          title: 'Soil Moisture - Bed 7',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'soil-moisture-8',\n          title: 'Soil Moisture - Bed 8',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 10, max: 90 },\n          inRange: true,\n        },\n        {\n          id: 'relative-humidity-1',\n          title: 'Relative Humidity Sensor 1',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 30, max: 90 }, // Keeping the previous example range\n          inRange: true,\n        },\n        {\n          id: 'relative-humidity-2',\n          title: 'Relative Humidity Sensor 2',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 35, max: 85 }, // Keeping the previous example range\n          inRange: true,\n        },\n        {\n          id: 'co2-sensor-1',\n          title: 'CO₂ Sensor 1',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 400, max: 1000 }, // Keeping the previous example range\n          inRange: true,\n        },\n        {\n          id: 'co2-sensor-2',\n          title: 'CO₂ Sensor 2',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 450, max: 950 }, // Keeping the previous example range\n          inRange: true,\n        },\n        {\n          id: 'temperature-sensor-1',\n          title: 'Temperature Sensor 1',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 15, max: 30 }, // Keeping the previous example range\n          inRange: true,\n        },\n        {\n          id: 'temperature-sensor-2',\n          title: 'Temperature Sensor 2',\n          dataPulled: 0,\n          dataExpected: 2880,\n          currentValue: null,\n          expectedRange: { min: 18, max: 27 }, // Keeping the previous example range\n          inRange: true,\n        },\n      ],\n      dataPullThresholdPercentage: 90,\n    };\n  },\n  methods: {\n    isWithinRange(value, range) {\n      return range && value !== null && value >= range.min && value <= range.max;\n    },\n    isDataPullSufficient(sensor) {\n      const percentagePulled = (sensor.dataPulled / sensor.dataExpected) * 100;\n      return percentagePulled >= this.dataPullThresholdPercentage;\n    },\n    isSensorServiceable(sensor) {\n      return this.isWithinRange(sensor.currentValue, sensor.expectedRange) && this.isDataPullSufficient(sensor);\n    },\n    updateSensorData(sensorId, newValue) {\n      const sensor = this.sensors.find(s => s.id === sensorId);\n      if (sensor) {\n        sensor.currentValue = newValue;\n        sensor.dataPulled++;\n        sensor.inRange = this.isWithinRange(newValue, sensor.expectedRange);\n      }\n    },\n    simulateSensorReading(sensor) {\n      if (!sensor.expectedRange) return null;\n      const range = sensor.expectedRange.max - sensor.expectedRange.min;\n      const baseValue = sensor.expectedRange.min + range / 2;\n      const fluctuation = Math.random() * range * 0.6 - range * 0.3;\n      return parseFloat((baseValue + fluctuation).toFixed(2));\n    }\n  },\n  mounted() {\n    setInterval(() => {\n      this.sensors.forEach(sensor => {\n        const newValue = this.simulateSensorReading(sensor);\n        this.updateSensorData(sensor.id, newValue);\n      });\n    }, 30000);\n  },\n  \n}\n</script>\n\n<style scoped>\n.icon {\n  margin-right: 10px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}