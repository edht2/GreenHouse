{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useRouter } from 'vue-router';\nexport default {\n  data() {\n    return {\n      loginForm: {\n        email: '',\n        password: ''\n      },\n      errorMessage: '',\n      loading: false\n    };\n  },\n  methods: {\n    async handleLogin() {\n      this.loading = true;\n      this.errorMessage = '';\n      if (!this.loginForm.email || !this.loginForm.password) {\n        this.errorMessage = 'Please enter both email and password.';\n        this.loading = false;\n        return;\n      }\n      try {\n        // Make the API call to your Flask backend using fetch\n        const response = await fetch('http://127.0.0.1:5000/login', {\n          //  Flask backend\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            //  Convert data to JSON\n            email: this.loginForm.email,\n            password: this.loginForm.password\n          })\n        });\n\n        // Handle the response\n        const data = await response.json(); // Parse JSON response\n        if (response.ok && data.token) {\n          //  response.ok for 200-299 range\n          // Store the token (securely - localStorage is NOT the best, but simple for this example)\n          localStorage.setItem('token', data.token);\n          // Redirect to a protected page (e.g., dashboard)\n          this.$router.push('/dashboard'); //  adjust this to your actual route\n        } else {\n          this.errorMessage = 'Login failed: Invalid credentials.';\n          if (data && data.message) {\n            this.errorMessage = `Login failed: ${data.message}`;\n          }\n        }\n      } catch (error) {\n        // Handle login errors (e.g., network error)\n        this.errorMessage = 'Login failed: Network error. Please try again.';\n        console.error(\"Login error:\", error);\n      } finally {\n        this.loading = false;\n      }\n    }\n  },\n  created() {\n    this.$router = useRouter();\n  }\n};","map":{"version":3,"names":["useRouter","data","loginForm","email","password","errorMessage","loading","methods","handleLogin","response","fetch","method","headers","body","JSON","stringify","json","ok","token","localStorage","setItem","$router","push","message","error","console","created"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/pages/authenticate/TheLogin.vue"],"sourcesContent":["<template>\n    <div class=\"login-container\">\n        <div class=\"login-form\">\n            <h2>Login</h2>\n            <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\n            <form @submit.prevent=\"handleLogin\">\n                <div class=\"form-group\">\n                    <label for=\"email\">Email:</label>\n                    <input type=\"email\" id=\"email\" v-model=\"loginForm.email\" required />\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\">Password:</label>\n                    <input type=\"password\" id=\"password\" v-model=\"loginForm.password\" required />\n                </div>\n                <button type=\"submit\" :disabled=\"loading\">\n                    <span v-if=\"loading\">Loading...</span>\n                    <span v-else>Login</span>\n                </button>\n            </form>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { useRouter } from 'vue-router';\n\nexport default {\n    data() {\n        return {\n            loginForm: {\n                email: '',\n                password: '',\n            },\n            errorMessage: '',\n            loading: false,\n        };\n    },\n    methods: {\n        async handleLogin() {\n            this.loading = true;\n            this.errorMessage = '';\n\n            if (!this.loginForm.email || !this.loginForm.password) {\n                this.errorMessage = 'Please enter both email and password.';\n                this.loading = false;\n                return;\n            }\n\n            try {\n                // Make the API call to your Flask backend using fetch\n                const response = await fetch('http://127.0.0.1:5000/login', {  //  Flask backend\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({  //  Convert data to JSON\n                        email: this.loginForm.email,\n                        password: this.loginForm.password,\n                    }),\n                });\n\n                // Handle the response\n                const data = await response.json(); // Parse JSON response\n                if (response.ok && data.token) { //  response.ok for 200-299 range\n                    // Store the token (securely - localStorage is NOT the best, but simple for this example)\n                    localStorage.setItem('token', data.token);\n                    // Redirect to a protected page (e.g., dashboard)\n                    this.$router.push('/dashboard'); //  adjust this to your actual route\n                } else {\n                    this.errorMessage = 'Login failed: Invalid credentials.';\n                    if(data && data.message){\n                         this.errorMessage = `Login failed: ${data.message}`;\n                    }\n                }\n\n            } catch (error) {\n                // Handle login errors (e.g., network error)\n                this.errorMessage = 'Login failed: Network error. Please try again.';\n                console.error(\"Login error:\", error);\n            } finally {\n                this.loading = false;\n            }\n        },\n    },\n    created() {\n      this.$router = useRouter();\n    }\n};\n</script>\n\n<style scoped>\n\n.login-container {\n    display: flex;\n    justify-content: center;\n    align-items: flex-start; /* Align items to the top of the container */\n    height: 100vh;\n    background-color: #f0f0f0;\n    padding-top: 25.33vh; /* Add top padding equivalent to 1/3 viewport height */\n}\n\n.login-form {\n    width: 300px;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 5px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\nlabel {\n    display: block;\n    margin-bottom: 5px;\n}\n\ninput {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 3px;\n}\n\nbutton {\n    width: 100%;\n    padding: 10px;\n    background-color: #007bff;\n    color: #fff;\n    border: none;\n    border-radius: 3px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n}\n\nbutton:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n}\n\n.error-message {\n    color: red;\n    margin-bottom: 10px;\n}\n</style>"],"mappings":";AAwBA,SAASA,SAAQ,QAAS,YAAY;AAEtC,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACd,CAAC;MACDC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE;IACb,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,WAAWA,CAAA,EAAG;MAChB,IAAI,CAACF,OAAM,GAAI,IAAI;MACnB,IAAI,CAACD,YAAW,GAAI,EAAE;MAEtB,IAAI,CAAC,IAAI,CAACH,SAAS,CAACC,KAAI,IAAK,CAAC,IAAI,CAACD,SAAS,CAACE,QAAQ,EAAE;QACnD,IAAI,CAACC,YAAW,GAAI,uCAAuC;QAC3D,IAAI,CAACC,OAAM,GAAI,KAAK;QACpB;MACJ;MAEA,IAAI;QACA;QACA,MAAMG,QAAO,GAAI,MAAMC,KAAK,CAAC,6BAA6B,EAAE;UAAG;UAC3DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAG;YACpBZ,KAAK,EAAE,IAAI,CAACD,SAAS,CAACC,KAAK;YAC3BC,QAAQ,EAAE,IAAI,CAACF,SAAS,CAACE;UAC7B,CAAC;QACL,CAAC,CAAC;;QAEF;QACA,MAAMH,IAAG,GAAI,MAAMQ,QAAQ,CAACO,IAAI,CAAC,CAAC,EAAE;QACpC,IAAIP,QAAQ,CAACQ,EAAC,IAAKhB,IAAI,CAACiB,KAAK,EAAE;UAAE;UAC7B;UACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEnB,IAAI,CAACiB,KAAK,CAAC;UACzC;UACA,IAAI,CAACG,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC,EAAE;QACrC,OAAO;UACH,IAAI,CAACjB,YAAW,GAAI,oCAAoC;UACxD,IAAGJ,IAAG,IAAKA,IAAI,CAACsB,OAAO,EAAC;YACnB,IAAI,CAAClB,YAAW,GAAI,iBAAiBJ,IAAI,CAACsB,OAAO,EAAE;UACxD;QACJ;MAEJ,EAAE,OAAOC,KAAK,EAAE;QACZ;QACA,IAAI,CAACnB,YAAW,GAAI,gDAAgD;QACpEoB,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACxC,UAAU;QACN,IAAI,CAAClB,OAAM,GAAI,KAAK;MACxB;IACJ;EACJ,CAAC;EACDoB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACL,OAAM,GAAIrB,SAAS,CAAC,CAAC;EAC5B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}