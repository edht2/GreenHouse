{"ast":null,"code":"const __default__ = {\n  props: {\n    modelValue: {\n      type: String,\n      default: 'closed',\n      validator: value => ['closed', 'half', 'open'].includes(value)\n    }\n  },\n  emits: ['update:modelValue'],\n  data() {\n    return {\n      positions: ['closed', 'half', 'open'],\n      containerHeight: 30,\n      // Fixed height\n      sliderHeight: 26,\n      // Fixed slider height\n      labelFontSize: '0.8em' // Base font size\n    };\n  },\n  computed: {\n    currentIndex() {\n      const initialIndex = this.positions.indexOf(this.modelValue);\n      return initialIndex !== -1 ? initialIndex : 0;\n    },\n    currentPositionClass() {\n      return `position-${this.positions[this.currentIndex]}`;\n    },\n    simplifiedSliderStyle() {\n      const containerWidth = 180; // Increased container width\n      const sliderWidth = this.sliderHeight; // Make width equal to height for a circle\n      const baseOffset = 2;\n      const step = (containerWidth - sliderWidth - 2 * baseOffset) / (this.positions.length - 1);\n      const translateX = baseOffset + this.currentIndex * step;\n      return {\n        transform: `translateX(${translateX}px)`,\n        width: `${sliderWidth}px`,\n        height: `${this.sliderHeight}px`,\n        borderRadius: `${this.sliderHeight / 2}px` // Ensure it's a circle\n      };\n    }\n  },\n  methods: {\n    cyclePosition() {\n      this.currentIndex = (this.currentIndex + 1) % this.positions.length;\n      this.$emit('update:modelValue', this.positions[this.currentIndex]);\n    }\n  }\n};\nimport { useCssVars as _useCssVars } from 'vue';\nconst __injectCSSVars__ = () => {\n  _useCssVars(_ctx => ({\n    \"6c82d4d0-containerHeight\": _ctx.containerHeight,\n    \"6c82d4d0-containerHeight\\ \\/\\ 2\": _ctx.containerHeight / 2,\n    \"6c82d4d0-labelFontSize\": _ctx.labelFontSize\n  }));\n};\nconst __setup__ = __default__.setup;\n__default__.setup = __setup__ ? (props, ctx) => {\n  __injectCSSVars__();\n  return __setup__(props, ctx);\n} : __injectCSSVars__;\nexport default __default__;","map":{"version":3,"names":["__default__","props","modelValue","type","String","default","validator","value","includes","emits","data","positions","containerHeight","sliderHeight","labelFontSize","computed","currentIndex","initialIndex","indexOf","currentPositionClass","simplifiedSliderStyle","containerWidth","sliderWidth","baseOffset","step","length","translateX","transform","width","height","borderRadius","methods","cyclePosition","$emit"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/components/UI/WindowActuatorToggle.vue"],"sourcesContent":["<template>\n  <div class=\"three-position-toggle\" @click=\"cyclePosition\">\n    <div class=\"switch-container\" :class=\"currentPositionClass\">\n      <span class=\"label closed-label\">Closed</span>\n      <div class=\"slider\" :style=\"simplifiedSliderStyle\"></div>\n      <span class=\"label half-label\">Half</span>\n      <span class=\"label open-label\">Open</span>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    modelValue: {\n      type: String,\n      default: 'closed',\n      validator: (value) => ['closed', 'half', 'open'].includes(value),\n    },\n  },\n  emits: ['update:modelValue'],\n  data() {\n    return {\n      positions: ['closed', 'half', 'open'],\n      containerHeight: 30, // Fixed height\n      sliderHeight: 26, // Fixed slider height\n      labelFontSize: '0.8em', // Base font size\n    };\n  },\n  computed: {\n    currentIndex() {\n      const initialIndex = this.positions.indexOf(this.modelValue);\n      return initialIndex !== -1 ? initialIndex : 0;\n    },\n    currentPositionClass() {\n      return `position-${this.positions[this.currentIndex]}`;\n    },\n    simplifiedSliderStyle() {\n      const containerWidth = 180; // Increased container width\n      const sliderWidth = this.sliderHeight; // Make width equal to height for a circle\n      const baseOffset = 2;\n      const step = (containerWidth - sliderWidth - 2 * baseOffset) / (this.positions.length - 1);\n      const translateX = baseOffset + this.currentIndex * step;\n      return {\n        transform: `translateX(${translateX}px)`,\n        width: `${sliderWidth}px`,\n        height: `${this.sliderHeight}px`,\n        borderRadius: `${this.sliderHeight / 2}px`, // Ensure it's a circle\n      };\n    },\n  },\n  methods: {\n    cyclePosition() {\n      this.currentIndex = (this.currentIndex + 1) % this.positions.length;\n      this.$emit('update:modelValue', this.positions[this.currentIndex]);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.three-position-toggle {\n  display: inline-block;\n  cursor: pointer;\n}\n\n.switch-container {\n  position: relative;\n  width: 180px; /* Increased width */\n  height: v-bind(containerHeight) + 'px'; /* Use data for height */\n  background-color: #ccc;\n  border-radius: v-bind(containerHeight / 2) + 'px'; /* Rounded container */\n  overflow: hidden;\n  transition: background-color 0.3s ease;\n}\n\n.position-closed {\n  background-color: #f44336; /* Red for \"Closed\" */\n}\n\n.position-half {\n  background-color: #800080; /* Purple for \"Half\" */\n}\n\n.position-open {\n  background-color: #2196f3; /* Blue for \"Open\" */\n}\n\n.label {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #fff;\n  font-size: v-bind(labelFontSize); /* Use data for font size */\n  font-weight: bold;\n  user-select: none;\n  white-space: nowrap;\n}\n\n.closed-label {\n  left: 10px;\n}\n\n.half-label {\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.open-label {\n  right: 10px;\n}\n\n.slider {\n  position: absolute;\n  top: 2px;\n  left: 2px;\n  /* Width and height are now set dynamically in simplifiedSliderStyle */\n  background-color: #fff;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n  transition: transform 0.3s ease;\n  /* border-radius is also dynamic */\n}\n</style>"],"mappings":"AAYA,MAAKA,WAAU;EACbC,KAAK,EAAE;IACLC,UAAU,EAAE;MACVC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE,QAAQ;MACjBC,SAAS,EAAGC,KAAK,IAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACD,KAAK;IACjE;EACF,CAAC;EACDE,KAAK,EAAE,CAAC,mBAAmB,CAAC;EAC5BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC;MACrCC,eAAe,EAAE,EAAE;MAAE;MACrBC,YAAY,EAAE,EAAE;MAAE;MAClBC,aAAa,EAAE,OAAO,CAAE;IAC1B,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,MAAMC,YAAW,GAAI,IAAI,CAACN,SAAS,CAACO,OAAO,CAAC,IAAI,CAAChB,UAAU,CAAC;MAC5D,OAAOe,YAAW,KAAM,CAAC,IAAIA,YAAW,GAAI,CAAC;IAC/C,CAAC;IACDE,oBAAoBA,CAAA,EAAG;MACrB,OAAO,YAAY,IAAI,CAACR,SAAS,CAAC,IAAI,CAACK,YAAY,CAAC,EAAE;IACxD,CAAC;IACDI,qBAAqBA,CAAA,EAAG;MACtB,MAAMC,cAAa,GAAI,GAAG,EAAE;MAC5B,MAAMC,WAAU,GAAI,IAAI,CAACT,YAAY,EAAE;MACvC,MAAMU,UAAS,GAAI,CAAC;MACpB,MAAMC,IAAG,GAAI,CAACH,cAAa,GAAIC,WAAU,GAAI,IAAIC,UAAU,KAAK,IAAI,CAACZ,SAAS,CAACc,MAAK,GAAI,CAAC,CAAC;MAC1F,MAAMC,UAAS,GAAIH,UAAS,GAAI,IAAI,CAACP,YAAW,GAAIQ,IAAI;MACxD,OAAO;QACLG,SAAS,EAAE,cAAcD,UAAU,KAAK;QACxCE,KAAK,EAAE,GAAGN,WAAW,IAAI;QACzBO,MAAM,EAAE,GAAG,IAAI,CAAChB,YAAY,IAAI;QAChCiB,YAAY,EAAE,GAAG,IAAI,CAACjB,YAAW,GAAI,CAAC,IAAI,CAAE;MAC9C,CAAC;IACH;EACF,CAAC;EACDkB,OAAO,EAAE;IACPC,aAAaA,CAAA,EAAG;MACd,IAAI,CAAChB,YAAW,GAAI,CAAC,IAAI,CAACA,YAAW,GAAI,CAAC,IAAI,IAAI,CAACL,SAAS,CAACc,MAAM;MACnE,IAAI,CAACQ,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAACtB,SAAS,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;IACpE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}