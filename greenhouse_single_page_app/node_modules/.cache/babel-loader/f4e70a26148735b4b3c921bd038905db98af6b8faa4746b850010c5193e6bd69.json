{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"three-position-toggle\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.cyclePosition && $options.cyclePosition(...args))\n  }, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"switch-container\", $options.currentPositionClass])\n  }, [_cache[1] || (_cache[1] = _createElementVNode(\"span\", {\n    class: \"label closed-label\"\n  }, \"Closed\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: \"slider\",\n    style: _normalizeStyle($options.sliderPositionStyle)\n  }, null, 4 /* STYLE */), _cache[2] || (_cache[2] = _createElementVNode(\"span\", {\n    class: \"label half-label\"\n  }, \"Half\", -1 /* HOISTED */)), _cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n    class: \"label open-label\"\n  }, \"Open\", -1 /* HOISTED */))], 2 /* CLASS */)]);\n}","map":{"version":3,"names":["_createElementBlock","class","onClick","_cache","args","$options","cyclePosition","_createElementVNode","_normalizeClass","currentPositionClass","style","_normalizeStyle","sliderPositionStyle"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/components/UI/WindowActuatorToggle.vue"],"sourcesContent":["<template>\n    <div class=\"three-position-toggle\" @click=\"cyclePosition\">\n      <div class=\"switch-container\" :class=\"currentPositionClass\">\n        <span class=\"label closed-label\">Closed</span>\n        <div class=\"slider\" :style=\"sliderPositionStyle\"></div>\n        <span class=\"label half-label\">Half</span>\n        <span class=\"label open-label\">Open</span>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    props: {\n      modelValue: {\n        type: String,\n        default: 'closed',\n        validator: (value) => ['closed', 'half', 'open'].includes(value),\n      },\n    },\n    emits: ['update:modelValue'],\n    data() {\n      return {\n        positions: ['closed', 'half', 'open'],\n        currentIndex: this.positions.indexOf(this.modelValue),\n      };\n    },\n    computed: {\n      currentPositionClass() {\n        return `position-${this.positions[this.currentIndex]}`;\n      },\n      sliderPositionStyle() {\n        const baseOffset = 2; // Initial offset\n        const step = (this.containerWidth - this.sliderWidth - 2 * baseOffset) / (this.positions.length - 1);\n        const translateX = baseOffset + this.currentIndex * step;\n        return { transform: `translateX(${translateX}px)` };\n      },\n      containerWidth() {\n        // Dynamically get the container width after rendering\n        return this.$el?.querySelector('.switch-container')?.offsetWidth || 90; // Default width\n      },\n      sliderWidth() {\n        return this.$el?.querySelector('.slider')?.offsetWidth || 26; // Default width\n      },\n    },\n    mounted() {\n      // Ensure initial slider position is correct after rendering\n      this.$nextTick(() => {\n        this.updateSliderPosition();\n      });\n    },\n    methods: {\n      cyclePosition() {\n        this.currentIndex = (this.currentIndex + 1) % this.positions.length;\n        this.$emit('update:modelValue', this.positions[this.currentIndex]);\n        this.updateSliderPosition();\n      },\n      updateSliderPosition() {\n        // Force re-evaluation of the computed style\n        this.$forceUpdate();\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .three-position-toggle {\n    display: inline-block;\n    cursor: pointer;\n  }\n  \n  .switch-container {\n    position: relative;\n    width: 90px; /* Adjust as needed */\n    height: 30px; /* Adjust as needed */\n    background-color: #ccc;\n    border-radius: 15px;\n    overflow: hidden;\n    transition: background-color 0.3s ease;\n  }\n  \n  .position-closed {\n    background-color: #f44336; /* Red for \"Closed\" */\n  }\n  \n  .position-half {\n    background-color: #800080; /* Purple for \"Half\" */\n  }\n  \n  .position-open {\n    background-color: #2196f3; /* Blue for \"Open\" */\n  }\n  \n  .label {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    color: #fff;\n    font-size: 0.7em;\n    font-weight: bold;\n    user-select: none;\n    white-space: nowrap;\n  }\n  \n  .closed-label {\n    left: 5px;\n  }\n  \n  .half-label {\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n  \n  .open-label {\n    right: 5px;\n  }\n  \n  .slider {\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    width: 26px; /* Adjust as needed */\n    height: 26px; /* Adjust as needed */\n    background-color: #fff;\n    border-radius: 50%;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n    transition: transform 0.3s ease;\n  }\n  \n  /* Dynamic slider positioning based on computed style */\n  </style>"],"mappings":";;uBACIA,mBAAA,CAOM;IAPDC,KAAK,EAAC,uBAAuB;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;MACtDG,mBAAA,CAKM;IALDN,KAAK,EAFhBO,eAAA,EAEiB,kBAAkB,EAASH,QAAA,CAAAI,oBAAoB;gCACxDF,mBAAA,CAA8C;IAAxCN,KAAK,EAAC;EAAoB,GAAC,QAAM,sBACvCM,mBAAA,CAAuD;IAAlDN,KAAK,EAAC,QAAQ;IAAES,KAAK,EAJlCC,eAAA,CAIoCN,QAAA,CAAAO,mBAAmB;qDAC/CL,mBAAA,CAA0C;IAApCN,KAAK,EAAC;EAAkB,GAAC,MAAI,sB,0BACnCM,mBAAA,CAA0C;IAApCN,KAAK,EAAC;EAAkB,GAAC,MAAI,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}