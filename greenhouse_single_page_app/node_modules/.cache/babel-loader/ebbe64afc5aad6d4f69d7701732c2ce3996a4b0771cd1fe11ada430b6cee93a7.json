{"ast":null,"code":"import { computed } from 'vue';\nexport default {\n  name: 'SensorFreqGauge',\n  // Using your component name\n  props: {\n    successfulPings: {\n      type: Number,\n      required: true\n    },\n    totalExpectedPings: {\n      type: Number,\n      required: true\n    }\n  },\n  computed: {\n    pingPercentage() {\n      if (this.totalExpectedPings === 0) {\n        return 0;\n      }\n      return this.successfulPings / this.totalExpectedPings * 100;\n    },\n    redPercentage() {\n      const threshold = 0.85; // 85%\n      return Math.max(0, Math.min(100, threshold * 100)); // Red always goes to 85%\n    },\n    orangePercentage() {\n      const startThreshold = 0.85; // 85%\n      const endThreshold = 0.95; // 95%\n      const start = startThreshold * 100;\n      const end = endThreshold * 100;\n      return Math.max(0, Math.min(100, end - start)); // Orange is always the range 85% to 95%\n    },\n    greenPercentage() {\n      return Math.max(0, 100 - 0.95 * 100); // Green is always from 95% to 100%\n    }\n  }\n};","map":{"version":3,"names":["computed","name","props","successfulPings","type","Number","required","totalExpectedPings","pingPercentage","redPercentage","threshold","Math","max","min","orangePercentage","startThreshold","endThreshold","start","end","greenPercentage"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/components/UI/SensorFreqGauge.vue"],"sourcesContent":["<template>\n  <div class=\"ping-indicator\">\n    <div\n      class=\"segment segment-red\"\n      :style=\"{ width: redPercentage + '%' }\"\n    ></div>\n    <div\n      class=\"segment segment-orange\"\n      :style=\"{ marginLeft: redPercentage + '%', width: orangePercentage + '%' }\"\n    ></div>\n    <div\n      class=\"segment segment-green\"\n      :style=\"{ marginLeft: redPercentage + orangePercentage + '%', width: greenPercentage + '%' }\"\n    ></div>\n    <div\n      class=\"ping-marker\"\n      :style=\"{ left: pingPercentage + '%' }\"\n    ></div>\n  </div>\n</template>\n\n<script>\nimport { computed } from 'vue';\n\nexport default {\n  name: 'SensorFreqGauge', // Using your component name\n  props: {\n    successfulPings: {\n      type: Number,\n      required: true,\n    },\n    totalExpectedPings: {\n      type: Number,\n      required: true,\n    },\n  },\n  computed: {\n    pingPercentage() {\n      if (this.totalExpectedPings === 0) {\n        return 0;\n      }\n      return (this.successfulPings / this.totalExpectedPings) * 100;\n    },\n    redPercentage() {\n      const threshold = 0.85; // 85%\n      return Math.max(0, Math.min(100, threshold * 100)); // Red always goes to 85%\n    },\n    orangePercentage() {\n      const startThreshold = 0.85; // 85%\n      const endThreshold = 0.95;   // 95%\n      const start = startThreshold * 100;\n      const end = endThreshold * 100;\n\n      return Math.max(0, Math.min(100, end - start)); // Orange is always the range 85% to 95%\n    },\n    greenPercentage() {\n      return Math.max(0, 100 - (0.95 * 100)); // Green is always from 95% to 100%\n    },\n  },\n};\n</script>\n\n<style scoped>\n.ping-indicator {\n  position: relative; /* For absolute positioning of the marker */\n  display: flex;\n  width: 300px; /* Adjust as needed */\n  height: 30px;  /* Adjust as needed */\n  border: 1px solid #ccc; /* Optional border */\n  overflow: hidden; /* To contain the color segments */\n}\n\n.segment {\n  height: 100%;\n}\n\n.segment-red {\n  background-color: red;\n  width: 85%; /* Red always takes up to 85% */\n}\n\n.segment-orange {\n  background-color: orange;\n  width: calc(95% - 85%); /* Orange is from 85% to 95% */\n}\n\n.segment-green {\n  background-color: green;\n  width: calc(100% - 95%); /* Green is from 95% to 100% */\n}\n\n.ping-marker {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 3px; /* Thickness of the line */\n  background-color: black;\n  z-index: 10; /* Ensure it's on top */\n}\n</style>"],"mappings":"AAsBA,SAASA,QAAO,QAAS,KAAK;AAE9B,eAAe;EACbC,IAAI,EAAE,iBAAiB;EAAE;EACzBC,KAAK,EAAE;IACLC,eAAe,EAAE;MACfC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,kBAAkB,EAAE;MAClBH,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDN,QAAQ,EAAE;IACRQ,cAAcA,CAAA,EAAG;MACf,IAAI,IAAI,CAACD,kBAAiB,KAAM,CAAC,EAAE;QACjC,OAAO,CAAC;MACV;MACA,OAAQ,IAAI,CAACJ,eAAc,GAAI,IAAI,CAACI,kBAAkB,GAAI,GAAG;IAC/D,CAAC;IACDE,aAAaA,CAAA,EAAG;MACd,MAAMC,SAAQ,GAAI,IAAI,EAAE;MACxB,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,GAAG,EAAEH,SAAQ,GAAI,GAAG,CAAC,CAAC,EAAE;IACtD,CAAC;IACDI,gBAAgBA,CAAA,EAAG;MACjB,MAAMC,cAAa,GAAI,IAAI,EAAE;MAC7B,MAAMC,YAAW,GAAI,IAAI,EAAI;MAC7B,MAAMC,KAAI,GAAIF,cAAa,GAAI,GAAG;MAClC,MAAMG,GAAE,GAAIF,YAAW,GAAI,GAAG;MAE9B,OAAOL,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,GAAG,EAAEK,GAAE,GAAID,KAAK,CAAC,CAAC,EAAE;IAClD,CAAC;IACDE,eAAeA,CAAA,EAAG;MAChB,OAAOR,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,GAAE,GAAK,IAAG,GAAI,GAAI,CAAC,EAAE;IAC1C;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}