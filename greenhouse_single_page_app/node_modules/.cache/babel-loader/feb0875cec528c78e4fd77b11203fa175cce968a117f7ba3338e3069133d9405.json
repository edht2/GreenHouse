{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useRouter } from 'vue-router';\nimport { mapActions } from 'vuex'; // Import mapActions helper\n\nexport default {\n  data() {\n    return {\n      loginForm: {\n        email: '',\n        password: ''\n      },\n      errorMessage: '',\n      loading: false\n    };\n  },\n  methods: {\n    ...mapActions('auth', ['loginSuccess']),\n    // Map the loginSuccess action\n    async handleLogin() {\n      this.loading = true;\n      this.errorMessage = '';\n      if (!this.loginForm.email || !this.loginForm.password) {\n        this.errorMessage = 'Please enter both email and password.';\n        this.loading = false;\n        return;\n      }\n      try {\n        const response = await fetch('http://127.0.0.1:5000/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: this.loginForm.email,\n            password: this.loginForm.password\n          }),\n          credentials: 'include' // Crucial for cookie handling\n        });\n        if (response.ok) {\n          const data = await response.json();\n          this.loginSuccess(data.role); // Dispatch the loginSuccess action with the role\n          console.log('User Role:', data.role); // Log the role to the console\n          this.$router.push('/greenhouse'); // Successful login, redirect\n        } else {\n          const data = await response.json();\n          this.errorMessage = data.message || 'Login failed. Invalid credentials.';\n        }\n      } catch (error) {\n        this.errorMessage = 'Network error. Please try again.';\n        console.error('Login error:', error);\n      } finally {\n        this.loading = false;\n      }\n    }\n  },\n  created() {\n    this.$router = useRouter();\n  }\n};","map":{"version":3,"names":["useRouter","mapActions","data","loginForm","email","password","errorMessage","loading","methods","handleLogin","response","fetch","method","headers","body","JSON","stringify","credentials","ok","json","loginSuccess","role","console","log","$router","push","message","error","created"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/pages/authenticate/TheLogin.vue"],"sourcesContent":["<template>\n    <div class=\"login-container\">\n        <div class=\"login-form\">\n            <h2>Login</h2>\n            <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\n            <form @submit.prevent=\"handleLogin\">\n                <div class=\"form-group\">\n                    <label for=\"email\">Email:</label>\n                    <input type=\"email\" id=\"email\" v-model=\"loginForm.email\" required />\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\">Password:</label>\n                    <input type=\"password\" id=\"password\" v-model=\"loginForm.password\" required />\n                </div>\n                <button type=\"submit\" :disabled=\"loading\">\n                    <span v-if=\"loading\">Loading...</span>\n                    <span v-else>Login</span>\n                </button>\n            </form>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { useRouter } from 'vue-router';\nimport { mapActions } from 'vuex'; // Import mapActions helper\n\nexport default {\n    data() {\n        return {\n            loginForm: {\n                email: '',\n                password: '',\n            },\n            errorMessage: '',\n            loading: false,\n        };\n    },\n    methods: {\n        ...mapActions('auth', ['loginSuccess']), // Map the loginSuccess action\n        async handleLogin() {\n            this.loading = true;\n            this.errorMessage = '';\n\n            if (!this.loginForm.email || !this.loginForm.password) {\n                this.errorMessage = 'Please enter both email and password.';\n                this.loading = false;\n                return;\n            }\n\n            try {\n                const response = await fetch('http://127.0.0.1:5000/login', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        email: this.loginForm.email,\n                        password: this.loginForm.password,\n                    }),\n                    credentials: 'include', // Crucial for cookie handling\n                });\n\n                if (response.ok) {\n                    const data = await response.json();\n                    this.loginSuccess(data.role); // Dispatch the loginSuccess action with the role\n                    console.log('User Role:', data.role); // Log the role to the console\n                    this.$router.push('/greenhouse'); // Successful login, redirect\n                } else {\n                    const data = await response.json();\n                    this.errorMessage = data.message || 'Login failed. Invalid credentials.';\n                }\n            } catch (error) {\n                this.errorMessage = 'Network error. Please try again.';\n                console.error('Login error:', error);\n            } finally {\n                this.loading = false;\n            }\n        },\n    },\n    created() {\n        this.$router = useRouter();\n    },\n};\n</script>\n\n<style scoped>\n/* ... your existing styles ... */\n</style>"],"mappings":";AAwBA,SAASA,SAAQ,QAAS,YAAY;AACtC,SAASC,UAAS,QAAS,MAAM,EAAE;;AAEnC,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACd,CAAC;MACDC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE;IACb,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACL,GAAGP,UAAU,CAAC,MAAM,EAAE,CAAC,cAAc,CAAC,CAAC;IAAE;IACzC,MAAMQ,WAAWA,CAAA,EAAG;MAChB,IAAI,CAACF,OAAM,GAAI,IAAI;MACnB,IAAI,CAACD,YAAW,GAAI,EAAE;MAEtB,IAAI,CAAC,IAAI,CAACH,SAAS,CAACC,KAAI,IAAK,CAAC,IAAI,CAACD,SAAS,CAACE,QAAQ,EAAE;QACnD,IAAI,CAACC,YAAW,GAAI,uCAAuC;QAC3D,IAAI,CAACC,OAAM,GAAI,KAAK;QACpB;MACJ;MAEA,IAAI;QACA,MAAMG,QAAO,GAAI,MAAMC,KAAK,CAAC,6BAA6B,EAAE;UACxDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACjBZ,KAAK,EAAE,IAAI,CAACD,SAAS,CAACC,KAAK;YAC3BC,QAAQ,EAAE,IAAI,CAACF,SAAS,CAACE;UAC7B,CAAC,CAAC;UACFY,WAAW,EAAE,SAAS,CAAE;QAC5B,CAAC,CAAC;QAEF,IAAIP,QAAQ,CAACQ,EAAE,EAAE;UACb,MAAMhB,IAAG,GAAI,MAAMQ,QAAQ,CAACS,IAAI,CAAC,CAAC;UAClC,IAAI,CAACC,YAAY,CAAClB,IAAI,CAACmB,IAAI,CAAC,EAAE;UAC9BC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAErB,IAAI,CAACmB,IAAI,CAAC,EAAE;UACtC,IAAI,CAACG,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC,EAAE;QACtC,OAAO;UACH,MAAMvB,IAAG,GAAI,MAAMQ,QAAQ,CAACS,IAAI,CAAC,CAAC;UAClC,IAAI,CAACb,YAAW,GAAIJ,IAAI,CAACwB,OAAM,IAAK,oCAAoC;QAC5E;MACJ,EAAE,OAAOC,KAAK,EAAE;QACZ,IAAI,CAACrB,YAAW,GAAI,kCAAkC;QACtDgB,OAAO,CAACK,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACxC,UAAU;QACN,IAAI,CAACpB,OAAM,GAAI,KAAK;MACxB;IACJ;EACJ,CAAC;EACDqB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACJ,OAAM,GAAIxB,SAAS,CAAC,CAAC;EAC9B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}