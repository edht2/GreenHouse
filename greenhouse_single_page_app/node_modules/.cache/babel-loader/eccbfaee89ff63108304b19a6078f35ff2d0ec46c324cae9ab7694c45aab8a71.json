{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Cookies from 'js-cookie';\nexport default {\n  loginUser({\n    commit\n  }, userData) {\n    commit('setGreenhouseUser', userData);\n  },\n  async logoutUser({\n    commit\n  }, router) {\n    // Receive the router instance as the second argument\n    try {\n      const response = await fetch('http://192.168.1.228:5000/logout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      if (response.ok) {\n        console.log('Logout successful on the server (optional)');\n      } else {\n        console.error('Error during server-side logout (optional)');\n      }\n    } catch (error) {\n      console.error('Error during logout API call:', error);\n    } finally {\n      Cookies.remove('jwt_token', {\n        path: '/'\n      });\n      commit('clearGreenhouseUser');\n      if (router) {\n        console.log('Router instance received in action:', router);\n        router.push('/login');\n      } else {\n        console.error('Router instance NOT received in action!');\n      }\n    }\n  },\n  async loadUserFromToken({\n    commit\n  }) {\n    const token = Cookies.get('jwt_token');\n    if (token) {\n      try {\n        const response = await fetch('http://192.168.1.228:5000/verify-token', {\n          // Replace with your actual endpoint\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}` // Or however you send your token\n          }\n        });\n        if (response.ok) {\n          const userData = await response.json();\n          commit('setGreenhouseUser', userData); // Update state with fetched data\n        } else {\n          // Token is invalid or expired, clear it\n          Cookies.remove('jwt_token', {\n            path: '/'\n          });\n          commit('clearGreenhouseUser');\n        }\n      } catch (error) {\n        console.error('Error verifying token:', error);\n        // Handle network errors\n        Cookies.remove('jwt_token', {\n          path: '/'\n        });\n        commit('clearGreenhouseUser');\n      }\n    }\n  }\n};","map":{"version":3,"names":["Cookies","loginUser","commit","userData","logoutUser","router","response","fetch","method","headers","credentials","ok","console","log","error","remove","path","push","loadUserFromToken","token","get","json"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/store/authenticate/actions.js"],"sourcesContent":["import Cookies from 'js-cookie';\n\nexport default {\n    loginUser({ commit }, userData) {\n        commit('setGreenhouseUser', userData);\n    },\n    async logoutUser({ commit }, router) { // Receive the router instance as the second argument\n        try {\n            const response = await fetch('http://192.168.1.228:5000/logout', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include',\n            });\n\n            if (response.ok) {\n                console.log('Logout successful on the server (optional)');\n            } else {\n                console.error('Error during server-side logout (optional)');\n            }\n        } catch (error) {\n            console.error('Error during logout API call:', error);\n        } finally {\n            Cookies.remove('jwt_token', { path: '/' });\n            commit('clearGreenhouseUser');\n            if (router) {\n                console.log('Router instance received in action:', router);\n                router.push('/login');\n            } else {\n                console.error('Router instance NOT received in action!');\n            }\n        }\n    },\n    async loadUserFromToken({ commit }) {\n        const token = Cookies.get('jwt_token');\n        if (token) {\n            try {\n                const response = await fetch('http://192.168.1.228:5000/verify-token', { // Replace with your actual endpoint\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${token}`, // Or however you send your token\n                    },\n                    \n                });\n\n                if (response.ok) {\n                    const userData = await response.json();\n                    commit('setGreenhouseUser', userData); // Update state with fetched data\n                } else {\n                    // Token is invalid or expired, clear it\n                    Cookies.remove('jwt_token', { path: '/' });\n                    commit('clearGreenhouseUser');\n                }\n            } catch (error) {\n                console.error('Error verifying token:', error);\n                // Handle network errors\n                Cookies.remove('jwt_token', { path: '/' });\n                commit('clearGreenhouseUser');\n            }\n        }\n    },\n};"],"mappings":";AAAA,OAAOA,OAAO,MAAM,WAAW;AAE/B,eAAe;EACXC,SAASA,CAAC;IAAEC;EAAO,CAAC,EAAEC,QAAQ,EAAE;IAC5BD,MAAM,CAAC,mBAAmB,EAAEC,QAAQ,CAAC;EACzC,CAAC;EACD,MAAMC,UAAUA,CAAC;IAAEF;EAAO,CAAC,EAAEG,MAAM,EAAE;IAAE;IACnC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,WAAW,EAAE;MACjB,CAAC,CAAC;MAEF,IAAIJ,QAAQ,CAACK,EAAE,EAAE;QACbC,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;MAC7D,CAAC,MAAM;QACHD,OAAO,CAACE,KAAK,CAAC,4CAA4C,CAAC;MAC/D;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACzD,CAAC,SAAS;MACNd,OAAO,CAACe,MAAM,CAAC,WAAW,EAAE;QAAEC,IAAI,EAAE;MAAI,CAAC,CAAC;MAC1Cd,MAAM,CAAC,qBAAqB,CAAC;MAC7B,IAAIG,MAAM,EAAE;QACRO,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAER,MAAM,CAAC;QAC1DA,MAAM,CAACY,IAAI,CAAC,QAAQ,CAAC;MACzB,CAAC,MAAM;QACHL,OAAO,CAACE,KAAK,CAAC,yCAAyC,CAAC;MAC5D;IACJ;EACJ,CAAC;EACD,MAAMI,iBAAiBA,CAAC;IAAEhB;EAAO,CAAC,EAAE;IAChC,MAAMiB,KAAK,GAAGnB,OAAO,CAACoB,GAAG,CAAC,WAAW,CAAC;IACtC,IAAID,KAAK,EAAE;MACP,IAAI;QACA,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;UAAE;UACrEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,UAAUU,KAAK,EAAE,CAAE;UACxC;QAEJ,CAAC,CAAC;QAEF,IAAIb,QAAQ,CAACK,EAAE,EAAE;UACb,MAAMR,QAAQ,GAAG,MAAMG,QAAQ,CAACe,IAAI,CAAC,CAAC;UACtCnB,MAAM,CAAC,mBAAmB,EAAEC,QAAQ,CAAC,CAAC,CAAC;QAC3C,CAAC,MAAM;UACH;UACAH,OAAO,CAACe,MAAM,CAAC,WAAW,EAAE;YAAEC,IAAI,EAAE;UAAI,CAAC,CAAC;UAC1Cd,MAAM,CAAC,qBAAqB,CAAC;QACjC;MACJ,CAAC,CAAC,OAAOY,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C;QACAd,OAAO,CAACe,MAAM,CAAC,WAAW,EAAE;UAAEC,IAAI,EAAE;QAAI,CAAC,CAAC;QAC1Cd,MAAM,CAAC,qBAAqB,CAAC;MACjC;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}