{"ast":null,"code":"import BaseButton from '@/components/UI/BaseButton.vue';\n// Assuming LeafIcon is either globally registered or imported if needed directly\n// import LeafIcon from './LeafIcon.vue'; // If needed\n\nexport default {\n  components: {\n    BaseButton\n    // LeafIcon // Register if needed and not globally available\n  },\n  data() {\n    // Add a data() method to hold the component's local state\n    return {\n      username: '',\n      // Initialize property for username input\n      password: '' // Initialize property for password input\n    };\n  },\n  computed: {\n    loggedInUser() {\n      // Make sure this getter returns an object with expected keys even when not logged in,\n      // or handle potential null/undefined values in the template (like the v-if example above)\n      return this.$store.getters['auth/greenhouseUser'] || {}; // Provide default empty object\n    }\n  },\n  methods: {\n    handleLogin() {\n      // This method is called when the form is submitted\n      console.log('Login attempt with:');\n      console.log('Username:', this.username);\n      console.log('Password:', this.password); // In real apps, be careful logging passwords!\n\n      // ** TODO: Implement your actual login logic here **\n      // This typically involves:\n      // 1. Basic validation (e.g., check if fields are empty - though 'required' helps)\n      // 2. Calling a Vuex action or an API service:\n      //    this.$store.dispatch('auth/login', {\n      //        username: this.username,\n      //        password: this.password\n      //    }).then(() => {\n      //        // Redirect on success, e.g., this.$router.push('/dashboard');\n      //    }).catch(error => {\n      //        // Handle login errors (e.g., show an error message)\n      //        console.error(\"Login failed:\", error);\n      //    });\n\n      // Clear fields after attempt (optional)\n      // this.username = '';\n      // this.password = '';\n    },\n    // Keeping your existing method if it's still needed\n    someMethod() {\n      const user = this.$store.getters['auth/greenhouseUser'];\n      console.log('Greenhouse User:', user);\n    }\n  }\n};","map":{"version":3,"names":["BaseButton","components","data","username","password","computed","loggedInUser","$store","getters","methods","handleLogin","console","log","someMethod","user"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/pages/authenticate/TheLogin.vue"],"sourcesContent":["<template>\n    <div>\n        <base-card>\n            <h3>\n                <base-button style=\"pointer-events: none;\"> <leaf-icon iconwidth=\"20\" class=\"icon\"></leaf-icon>\n                    Log In Page\n                </base-button>\n            </h3><br>\n\n            <form @submit.prevent=\"handleLogin\">\n                <div class=\"form-control\">\n                    <label for=\"username\">Username</label>\n                    <input type=\"text\" id=\"username\" v-model.trim=\"username\" required />\n                    </div>\n\n                <div class=\"form-control\">\n                    <label for=\"password\">Password</label>\n                    <input type=\"password\" id=\"password\" v-model=\"password\" required />\n                    </div>\n\n                <div>\n                    <base-button type=\"submit\">Log In</base-button>\n                    </div>\n            </form>\n            <p v-if=\"loggedInUser.firstName\"> Logged In As:\n                {{ loggedInUser.firstName }}\n                {{ loggedInUser.lastName }}\n                ({{ loggedInUser.role }})\n            </p>\n            <p v-else>\n                Please log in.\n            </p>\n\n        </base-card>\n    </div>\n</template>\n\n<script>\nimport BaseButton from '@/components/UI/BaseButton.vue';\n// Assuming LeafIcon is either globally registered or imported if needed directly\n// import LeafIcon from './LeafIcon.vue'; // If needed\n\nexport default {\n    components: {\n        BaseButton,\n        // LeafIcon // Register if needed and not globally available\n    },\n    data() {\n        // Add a data() method to hold the component's local state\n        return {\n            username: '', // Initialize property for username input\n            password: ''  // Initialize property for password input\n        };\n    },\n    computed: {\n        loggedInUser() {\n            // Make sure this getter returns an object with expected keys even when not logged in,\n            // or handle potential null/undefined values in the template (like the v-if example above)\n            return this.$store.getters['auth/greenhouseUser'] || {}; // Provide default empty object\n        }\n    },\n    methods: {\n        handleLogin() {\n            // This method is called when the form is submitted\n            console.log('Login attempt with:');\n            console.log('Username:', this.username);\n            console.log('Password:', this.password); // In real apps, be careful logging passwords!\n\n            // ** TODO: Implement your actual login logic here **\n            // This typically involves:\n            // 1. Basic validation (e.g., check if fields are empty - though 'required' helps)\n            // 2. Calling a Vuex action or an API service:\n            //    this.$store.dispatch('auth/login', {\n            //        username: this.username,\n            //        password: this.password\n            //    }).then(() => {\n            //        // Redirect on success, e.g., this.$router.push('/dashboard');\n            //    }).catch(error => {\n            //        // Handle login errors (e.g., show an error message)\n            //        console.error(\"Login failed:\", error);\n            //    });\n\n            // Clear fields after attempt (optional)\n            // this.username = '';\n            // this.password = '';\n        },\n\n        // Keeping your existing method if it's still needed\n        someMethod() {\n            const user = this.$store.getters['auth/greenhouseUser'];\n            console.log('Greenhouse User:', user);\n        }\n    }\n}\n</script>\n\n<style scoped>\n.icon {\n    margin-right: 10px;\n}\n\n/* Add some basic styling for the form */\n.form-control {\n    margin: 0.5rem 0;\n}\n\n.form-control label {\n    font-weight: bold;\n    display: block; /* Puts label on its own line */\n    margin-bottom: 0.5rem;\n}\n\n.form-control input {\n    display: block;\n    width: 100%; /* Make input take full width of container */\n    font: inherit;\n    border: 1px solid #ccc;\n    padding: 0.15rem;\n    box-sizing: border-box; /* Include padding/border in width */\n}\n\n.form-control input:focus {\n    border-color: #3d008d;\n    background-color: #faf6ff;\n    outline: none;\n}\n</style>\n"],"mappings":"AAsCA,OAAOA,UAAS,MAAO,gCAAgC;AACvD;AACA;;AAEA,eAAe;EACXC,UAAU,EAAE;IACRD;IACA;EACJ,CAAC;EACDE,IAAIA,CAAA,EAAG;IACH;IACA,OAAO;MACHC,QAAQ,EAAE,EAAE;MAAE;MACdC,QAAQ,EAAE,EAAC,CAAG;IAClB,CAAC;EACL,CAAC;EACDC,QAAQ,EAAE;IACNC,YAAYA,CAAA,EAAG;MACX;MACA;MACA,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,qBAAqB,KAAK,CAAC,CAAC,EAAE;IAC7D;EACJ,CAAC;EACDC,OAAO,EAAE;IACLC,WAAWA,CAAA,EAAG;MACV;MACAC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCD,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,IAAI,CAACT,QAAQ,CAAC;MACvCQ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,IAAI,CAACR,QAAQ,CAAC,EAAE;;MAEzC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;IACJ,CAAC;IAED;IACAS,UAAUA,CAAA,EAAG;MACT,MAAMC,IAAG,GAAI,IAAI,CAACP,MAAM,CAACC,OAAO,CAAC,qBAAqB,CAAC;MACvDG,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,IAAI,CAAC;IACzC;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}