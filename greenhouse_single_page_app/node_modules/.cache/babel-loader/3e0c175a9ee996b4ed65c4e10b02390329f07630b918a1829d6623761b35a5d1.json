{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Cookies from 'js-cookie';\nexport default {\n  loginUser({\n    commit\n  }, userData) {\n    commit('setGreenhouseUser', userData);\n    console.log('User data stored in Vuex after login:', userData);\n    console.log('First Name:', userData.first_name);\n    console.log('Last Name:', userData.last_name);\n    console.log('Role:', userData.role);\n  },\n  async logoutUser({\n    commit\n  }, router) {\n    // Receive the router instance as the second argument\n    try {\n      const response = await fetch('http://192.168.1.228:5000/logout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      if (response.ok) {\n        console.log('Logout successful on the server (optional)');\n      } else {\n        console.error('Error during server-side logout (optional)');\n      }\n    } catch (error) {\n      console.error('Error during logout API call:', error);\n    } finally {\n      console.log('logoutUser: About to remove jwt_token cookie');\n      Cookies.remove('jwt_token', {\n        path: '/'\n      });\n      console.log('logoutUser: jwt_token cookie removed');\n      commit('clearGreenhouseUser');\n      router.push('/login');\n    }\n  },\n  async loadUserFromToken({\n    commit\n  }) {\n    try {\n      const csrfToken = Cookies.get('csrf_access_token'); // Get the CSRF token cookie\n      console.log('csrf token', csrfToken);\n      const response = await fetch('http://192.168.1.228:5000/verify-token', {\n        method: 'POST',\n        credentials: 'include',\n        // To send the httpOnly jwt_token cookie\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRF-TOKEN': csrfToken // Include the CSRF token in the header\n        }\n        // No body needed for this verification request\n      });\n      if (!response.ok) {\n        console.error(`Token verification failed with status: ${response.status}`);\n        commit('setGreenhouseUser', null);\n        commit('setAuthStatus', false);\n        return;\n      }\n      const data = await response.json();\n      commit('setGreenhouseUser', {\n        firstName: data.firstName,\n        lastName: data.lastName,\n        role: data.role\n      });\n      commit('setAuthStatus', true);\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      commit('setGreenhouseUser', null);\n      commit('setAuthStatus', false);\n    }\n  }\n};","map":{"version":3,"names":["Cookies","loginUser","commit","userData","console","log","first_name","last_name","role","logoutUser","router","response","fetch","method","headers","credentials","ok","error","remove","path","push","loadUserFromToken","csrfToken","get","status","data","json","firstName","lastName"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/store/authenticate/actions.js"],"sourcesContent":["import Cookies from 'js-cookie';\n\nexport default {\n    loginUser({ commit }, userData) {\n        commit('setGreenhouseUser', userData);\n        console.log('User data stored in Vuex after login:', userData);\n        console.log('First Name:', userData.first_name);\n        console.log('Last Name:', userData.last_name);\n        console.log('Role:', userData.role);\n    },\n    async logoutUser({ commit }, router) { // Receive the router instance as the second argument\n        try {\n            const response = await fetch('http://192.168.1.228:5000/logout', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include',\n            });\n\n            if (response.ok) {\n                console.log('Logout successful on the server (optional)');\n            } else {\n                console.error('Error during server-side logout (optional)');\n            }\n        } catch (error) {\n            console.error('Error during logout API call:', error);\n        } finally {\n            console.log('logoutUser: About to remove jwt_token cookie');\n            Cookies.remove('jwt_token', { path: '/' });\n            console.log('logoutUser: jwt_token cookie removed');\n            commit('clearGreenhouseUser');\n            router.push('/login');\n        }\n    },\n    async loadUserFromToken({ commit }) {\n        try {\n          const csrfToken = Cookies.get('csrf_access_token'); // Get the CSRF token cookie\n          console.log('csrf token' , csrfToken)\n      \n          const response = await fetch('http://192.168.1.228:5000/verify-token', {\n            method: 'POST',\n            credentials: 'include', // To send the httpOnly jwt_token cookie\n            headers: {\n              'Content-Type': 'application/json',\n              'X-CSRF-TOKEN': csrfToken, // Include the CSRF token in the header\n            },\n            // No body needed for this verification request\n          });\n      \n          if (!response.ok) {\n            console.error(`Token verification failed with status: ${response.status}`);\n\n            commit('setGreenhouseUser', null);\n            commit('setAuthStatus', false);\n            return;\n          }\n      \n          const data = await response.json();\n      \n          commit('setGreenhouseUser', {\n            firstName: data.firstName,\n            lastName: data.lastName,\n            role: data.role,\n          });\n          commit('setAuthStatus', true);\n          \n        } catch (error) {\n          console.error('Error verifying token:', error);\n          commit('setGreenhouseUser', null);\n          commit('setAuthStatus', false);\n        }\n      },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}