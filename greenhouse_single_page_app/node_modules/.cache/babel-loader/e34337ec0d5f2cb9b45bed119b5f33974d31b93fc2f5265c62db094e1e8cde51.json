{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"three-position-toggle\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.cyclePosition && $options.cyclePosition(...args))\n  }, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"switch-container\", $options.currentPositionClass]),\n    style: _normalizeStyle({\n      height: $data.containerHeight + 'px',\n      borderRadius: $data.containerHeight / 2 + 'px'\n    })\n  }, [_cache[1] || (_cache[1] = _createElementVNode(\"span\", {\n    class: \"label closed-label\"\n  }, \"Closed\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: \"slider\",\n    style: _normalizeStyle($options.simplifiedSliderStyle)\n  }, null, 4 /* STYLE */), _cache[2] || (_cache[2] = _createElementVNode(\"span\", {\n    class: \"label half-label\"\n  }, \"Half\", -1 /* HOISTED */)), _cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n    class: \"label open-label\"\n  }, \"Open\", -1 /* HOISTED */))], 6 /* CLASS, STYLE */)]);\n}","map":{"version":3,"names":["_createElementBlock","class","onClick","_cache","args","$options","cyclePosition","_createElementVNode","_normalizeClass","currentPositionClass","style","_normalizeStyle","$data","containerHeight","simplifiedSliderStyle"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/components/UI/WindowActuatorToggle.vue"],"sourcesContent":["<template>\n    <div class=\"three-position-toggle\" @click=\"cyclePosition\">\n      <div\n        class=\"switch-container\"\n        :class=\"currentPositionClass\"\n        :style=\"{\n          height: containerHeight + 'px',\n          borderRadius: containerHeight / 2 + 'px'\n        }\"\n      >\n        <span class=\"label closed-label\">Closed</span>\n        <div class=\"slider\" :style=\"simplifiedSliderStyle\"></div>\n        <span class=\"label half-label\">Half</span>\n        <span class=\"label open-label\">Open</span>\n      </div>\n    </div>\n  </template>\n\n<script>\nexport default {\n  props: {\n    modelValue: {\n      type: String,\n      default: 'closed',\n      validator: (value) => ['closed', 'half', 'open'].includes(value),\n    },\n  },\n  emits: ['update:modelValue'],\n  data() {\n    return {\n      positions: ['closed', 'half', 'open'],\n      containerHeight: 30,\n      sliderHeight: 26,\n      labelFontSize: '0.8em',\n    };\n  },\n  watch: {\n    windowPosition(newValue, oldValue) {\n      console.log('windowPosition changed:', oldValue, '=>', newValue);\n    },\n  },\n  computed: {\n    currentIndex() {\n      const initialIndex = this.positions.indexOf(this.modelValue);\n      return initialIndex !== -1 ? initialIndex : 0;\n    },\n    currentPositionClass() {\n      return `position-${this.positions[this.currentIndex]}`;\n    },\n    simplifiedSliderStyle() {\n      const containerWidth = 180;\n      const sliderWidth = this.sliderHeight;\n      const baseOffset = 2;\n      const step = (containerWidth - sliderWidth - 2 * baseOffset) / (this.positions.length - 1);\n      const translateX = baseOffset + this.currentIndex * step;\n      return {\n        transform: `translateX(${translateX}px)`,\n        width: `${sliderWidth}px`,\n        height: `${this.sliderHeight}px`,\n        borderRadius: `${this.sliderHeight / 2}px`,\n      };\n    },\n  },\n  methods: {\n  cyclePosition() {\n    console.log('cyclePosition called!'); // Add this line\n    const nextIndex = (this.positions.indexOf(this.modelValue) + 1) % this.positions.length;\n    this.$emit('update:modelValue', this.positions[nextIndex]);\n  },\n},\n};\n</script>\n\n<style scoped>\n.three-position-toggle {\n  display: inline-block;\n  cursor: pointer;\n}\n\n.switch-container {\n  position: relative;\n  width: 180px; /* Increased width */\n  height: v-bind(containerHeight) + 'px'; /* Use data for height */\n  background-color: #ccc;\n  border-radius: v-bind(containerHeight / 2) + 'px'; /* Rounded container */\n  overflow: hidden;\n  transition: background-color 0.3s ease;\n}\n\n.position-closed {\n  background-color: #f44336; /* Red for \"Closed\" */\n}\n\n.position-half {\n  background-color: #800080; /* Purple for \"Half\" */\n}\n\n.position-open {\n  background-color: #2196f3; /* Blue for \"Open\" */\n}\n\n.label {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #fff;\n  font-size: v-bind(labelFontSize); /* Use data for font size */\n  font-weight: bold;\n  user-select: none;\n  white-space: nowrap;\n}\n\n.closed-label {\n  left: 10px;\n}\n\n.half-label {\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.open-label {\n  right: 10px;\n}\n\n.slider {\n  position: absolute;\n  top: 2px;\n  left: 2px;\n  width: v-bind(sliderHeight) + 'px'; /* Dynamic width for circle */\n  height: v-bind(sliderHeight) + 'px'; /* Dynamic height for circle */\n  background-color: rgba(255, 165, 0, 0.6); /* Semi-opaque orange: R, G, B, Alpha */\n  border-radius: v-bind(sliderHeight / 2) + 'px'; /* Dynamic border radius for circle */\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n  transition: transform 0.3s ease;\n}\n</style>"],"mappings":";;uBACIA,mBAAA,CAcM;IAdDC,KAAK,EAAC,uBAAuB;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;MACtDG,mBAAA,CAYM;IAXJN,KAAK,EAHbO,eAAA,EAGc,kBAAkB,EAChBH,QAAA,CAAAI,oBAAoB;IAC3BC,KAAK,EALdC,eAAA;cAKoCC,KAAA,CAAAC,eAAe;oBAAiCD,KAAA,CAAAC,eAAe;;gCAK3FN,mBAAA,CAA8C;IAAxCN,KAAK,EAAC;EAAoB,GAAC,QAAM,sBACvCM,mBAAA,CAAyD;IAApDN,KAAK,EAAC,QAAQ;IAAES,KAAK,EAXlCC,eAAA,CAWoCN,QAAA,CAAAS,qBAAqB;qDACjDP,mBAAA,CAA0C;IAApCN,KAAK,EAAC;EAAkB,GAAC,MAAI,sB,0BACnCM,mBAAA,CAA0C;IAApCN,KAAK,EAAC;EAAkB,GAAC,MAAI,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}