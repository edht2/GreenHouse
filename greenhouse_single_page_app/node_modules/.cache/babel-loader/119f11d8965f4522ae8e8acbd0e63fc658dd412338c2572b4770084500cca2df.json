{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"ping-indicator\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"segment segment-red\"\n  }, null, -1 /* HOISTED */)), _cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n    class: \"segment segment-orange\"\n  }, null, -1 /* HOISTED */)), _cache[2] || (_cache[2] = _createElementVNode(\"div\", {\n    class: \"segment segment-green\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: \"ping-marker\",\n    style: _normalizeStyle({\n      left: Math.abs(_ctx.visualPercentage - 100) < 0.001 ? `calc(100% - ${$options.markerThickness}px)` : `calc(${_ctx.visualPercentage}% + (visualPercentage === 0 ? ${$options.markerThickness / 2}px : 0px))`\n    })\n  }, null, 4 /* STYLE */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","style","_normalizeStyle","Math","abs","_ctx","visualPercentage","$options","markerThickness"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/components/UI/SensorFreqGauge.vue"],"sourcesContent":["<template>\n  <div class=\"ping-indicator\">\n    <div class=\"segment segment-red\"></div>\n    <div class=\"segment segment-orange\"></div>\n    <div class=\"segment segment-green\"></div>\n    <div\n  class=\"ping-marker\"\n  :style=\"{\n    left: Math.abs(visualPercentage - 100) < 0.001\n      ? `calc(100% - ${markerThickness}px)`\n      : `calc(${visualPercentage}% + (visualPercentage === 0 ? ${markerThickness / 2}px : 0px))`\n  }\"\n></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SensorFreqGauge',\n  props: {\n    successfulPings: {\n      type: Number,\n      required: true,\n    },\n    totalExpectedPings: {\n      type: Number,\n      required: true,\n    },\n  },\n  computed: {\n  pingPercentage() {\n    const pulled = Number(this.successfulPings);\n    const expected = Number(this.totalExpectedPings);\n\n    if (expected === 0) {\n      return 0; // Or perhaps a visual indicator for no data\n    }\n\n    const rawPercentage = (pulled / expected) * 100;\n    let visualPercentage;\n\n    if (rawPercentage <= 75) {\n      visualPercentage = 0; // Map 75% or less to the left (0%)\n    } else {\n      // Map the range 75% - 100% to the visual range 0% - 100%\n      visualPercentage = ((rawPercentage - 75) / 25) * 100;\n    }\n\n    return visualPercentage;\n  },\n  markerThickness() {\n    return 5; // Or 3, depending on your CSS\n  },\n},\n};\n</script>\n\n<style scoped>\n.ping-indicator {\n  position: relative;\n  display: flex;\n  width: 300px; /* Adjust as needed */\n  height: 30px;  /* Adjust as needed */\n  border: 0px solid #ccc;\n  overflow: hidden;\n}\n\n.segment {\n  height: 100%;\n  flex-shrink: 0;\n  position: absolute;\n}\n\n.segment-red {\n  background-color: red;\n  left: 0;\n  width: calc((85 - 75) / 25 * 100%); /* Represents the 75-85% actual range */\n}\n\n.segment-orange {\n  background-color: orange;\n  left: calc((85 - 75) / 25 * 100%); /* Starts after red */\n  width: calc((95 - 85) / 25 * 100%); /* Represents the 85-95% actual range */\n}\n\n.segment-green {\n  background-color: green;\n  left: calc((85 - 75) / 25 * 100% + (95 - 85) / 25 * 100%); /* Starts after red + orange */\n  width: calc((100 - 95) / 25 * 100%); /* Represents the 95-100% actual range */\n}\n\n.ping-marker {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 5px; /* Or 3px */\n  background-color: black;\n  z-index: 10;\n  left: calc(${pingPercentage}% - ${markerThickness}px);\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;uBAA3BC,mBAAA,CAYM,OAZNC,UAYM,G,0BAXJC,mBAAA,CAAuC;IAAlCH,KAAK,EAAC;EAAqB,6B,0BAChCG,mBAAA,CAA0C;IAArCH,KAAK,EAAC;EAAwB,6B,0BACnCG,mBAAA,CAAyC;IAApCH,KAAK,EAAC;EAAuB,6BAClCG,mBAAA,CAOG;IANLH,KAAK,EAAC,aAAa;IAClBI,KAAK,EAPRC,eAAA;YAOsBC,IAAI,CAACC,GAAG,CAACC,IAAA,CAAAC,gBAAgB,kB,eAAuCC,QAAA,CAAAC,eAAe,Q,QAAsBH,IAAA,CAAAC,gBAAgB,iCAAiCC,QAAA,CAAAC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}