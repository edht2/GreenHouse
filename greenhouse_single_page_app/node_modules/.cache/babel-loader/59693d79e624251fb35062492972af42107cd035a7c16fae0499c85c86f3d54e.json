{"ast":null,"code":"export default {\n  name: 'SensorFreqGauge',\n  props: {\n    successfulPings: {\n      type: Number,\n      required: true\n    },\n    totalExpectedPings: {\n      type: Number,\n      required: true\n    }\n  },\n  computed: {\n    visualPingPercentage() {\n      const pulled = Number(this.successfulPings);\n      const expected = Number(this.totalExpectedPings);\n      if (expected === 0) {\n        return 0;\n      }\n      const rawPercentage = pulled / expected * 100;\n      let visualPercentage;\n      if (rawPercentage <= 75) {\n        visualPercentage = 0;\n      } else {\n        visualPercentage = (rawPercentage - 75) / 25 * 100;\n      }\n      return visualPercentage;\n    },\n    markerThickness() {\n      return 5; // Or 3, depending on your CSS\n    }\n  }\n};","map":{"version":3,"names":["name","props","successfulPings","type","Number","required","totalExpectedPings","computed","visualPingPercentage","pulled","expected","rawPercentage","visualPercentage","markerThickness"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/components/UI/SensorFreqGauge.vue"],"sourcesContent":["<template>\n  <div class=\"ping-indicator\">\n    <div class=\"segment segment-red\"></div>\n    <div class=\"segment segment-orange\"></div>\n    <div class=\"segment segment-green\"></div>\n    <div\n  class=\"ping-marker\"\n  :style=\"{ left: visualPingPercentage + '%' }\"\n></div>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'SensorFreqGauge',\n  props: {\n    successfulPings: {\n      type: Number,\n      required: true,\n    },\n    totalExpectedPings: {\n      type: Number,\n      required: true,\n    },\n  },\n  computed: {\n    visualPingPercentage() {\n      const pulled = Number(this.successfulPings);\n      const expected = Number(this.totalExpectedPings);\n\n      if (expected === 0) {\n        return 0;\n      }\n\n      const rawPercentage = (pulled / expected) * 100;\n      let visualPercentage;\n\n      if (rawPercentage <= 75) {\n        visualPercentage = 0;\n      } else {\n        visualPercentage = ((rawPercentage - 75) / 25) * 100;\n      }\n\n      return visualPercentage;\n    },\n    markerThickness() {\n      return 5; // Or 3, depending on your CSS\n    },\n  },\n};\n</script>\n\n<style scoped>\n.ping-indicator {\n  position: relative;\n  display: flex;\n  width: 300px; /* Adjust as needed */\n  height: 30px;  /* Adjust as needed */\n  border: 0px solid #ccc;\n  overflow: hidden;\n}\n\n.segment {\n  height: 100%;\n  flex-shrink: 0;\n  position: absolute;\n}\n\n.segment-red {\n  background-color: red;\n  left: 0;\n  width: calc((85 - 75) / 25 * 100%); /* Represents the 75-85% actual range */\n}\n\n.segment-orange {\n  background-color: orange;\n  left: calc((85 - 75) / 25 * 100%); /* Starts after red */\n  width: calc((95 - 85) / 25 * 100%); /* Represents the 85-95% actual range */\n}\n\n.segment-green {\n  background-color: green;\n  left: calc((85 - 75) / 25 * 100% + (95 - 85) / 25 * 100%); /* Starts after red + orange */\n  width: calc((100 - 95) / 25 * 100%); /* Represents the 95-100% actual range */\n}\n\n.ping-marker {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 5px; /* Or 3px */\n  background-color: black;\n  z-index: 10;\n  left: calc(${pingPercentage}% - ${markerThickness}px);\n}\n</style>"],"mappings":"AAYA,eAAe;EACbA,IAAI,EAAE,iBAAiB;EACvBC,KAAK,EAAE;IACLC,eAAe,EAAE;MACfC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,kBAAkB,EAAE;MAClBH,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDE,QAAQ,EAAE;IACRC,oBAAoBA,CAAA,EAAG;MACrB,MAAMC,MAAK,GAAIL,MAAM,CAAC,IAAI,CAACF,eAAe,CAAC;MAC3C,MAAMQ,QAAO,GAAIN,MAAM,CAAC,IAAI,CAACE,kBAAkB,CAAC;MAEhD,IAAII,QAAO,KAAM,CAAC,EAAE;QAClB,OAAO,CAAC;MACV;MAEA,MAAMC,aAAY,GAAKF,MAAK,GAAIC,QAAQ,GAAI,GAAG;MAC/C,IAAIE,gBAAgB;MAEpB,IAAID,aAAY,IAAK,EAAE,EAAE;QACvBC,gBAAe,GAAI,CAAC;MACtB,OAAO;QACLA,gBAAe,GAAK,CAACD,aAAY,GAAI,EAAE,IAAI,EAAE,GAAI,GAAG;MACtD;MAEA,OAAOC,gBAAgB;IACzB,CAAC;IACDC,eAAeA,CAAA,EAAG;MAChB,OAAO,CAAC,EAAE;IACZ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}