{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form-control\"\n};\nconst _hoisted_2 = {\n  class: \"form-control\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_leaf_icon = _resolveComponent(\"leaf-icon\");\n  const _component_base_button = _resolveComponent(\"base-button\");\n  const _component_base_card = _resolveComponent(\"base-card\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_base_card, null, {\n    default: _withCtx(() => [_createElementVNode(\"h3\", null, [_createVNode(_component_base_button, {\n      style: {\n        \"pointer-events\": \"none\"\n      }\n    }, {\n      default: _withCtx(() => [_createVNode(_component_leaf_icon, {\n        iconwidth: \"20\",\n        class: \"icon\"\n      }), _cache[3] || (_cache[3] = _createTextVNode(\" Log In Page \"))]),\n      _: 1 /* STABLE */\n    })]), _cache[7] || (_cache[7] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"form\", {\n      onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.handleLogin && $options.handleLogin(...args), [\"prevent\"]))\n    }, [_createElementVNode(\"div\", _hoisted_1, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", {\n      for: \"username\"\n    }, \"Username\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      id: \"username\",\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.username = $event),\n      required: \"\"\n    }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.username, void 0, {\n      trim: true\n    }]])]), _createElementVNode(\"div\", _hoisted_2, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n      for: \"password\"\n    }, \"Password\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n      type: \"password\",\n      id: \"password\",\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event),\n      required: \"\"\n    }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]])]), _createElementVNode(\"div\", null, [_createVNode(_component_base_button, {\n      type: \"submit\"\n    }, {\n      default: _withCtx(() => _cache[6] || (_cache[6] = [_createTextVNode(\"Log In\")])),\n      _: 1 /* STABLE */\n    })])], 32 /* NEED_HYDRATION */), $options.loggedInUser.firstName ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \" Logged In As: \" + _toDisplayString($options.loggedInUser.firstName) + \" \" + _toDisplayString($options.loggedInUser.lastName) + \" (\" + _toDisplayString($options.loggedInUser.role) + \") \", 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"p\", _hoisted_4, \" Please log in. \"))]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_createVNode","_component_base_card","default","_withCtx","_createElementVNode","_component_base_button","style","_component_leaf_icon","iconwidth","_createTextVNode","_","onSubmit","_cache","_withModifiers","args","$options","handleLogin","_hoisted_1","for","type","id","$event","$data","username","required","trim","_hoisted_2","password","loggedInUser","firstName","_hoisted_3","_toDisplayString","lastName","role","_hoisted_4"],"sources":["/home/alex/dev/GreenHouse/flaskapp/greenhouse_single_page_app/src/pages/authenticate/TheLogin.vue"],"sourcesContent":["<template>\n    <div>\n        <base-card>\n            <h3>\n                <base-button style=\"pointer-events: none;\"> <leaf-icon iconwidth=\"20\" class=\"icon\"></leaf-icon>\n                    Log In Page\n                </base-button>\n            </h3><br>\n\n            <form @submit.prevent=\"handleLogin\">\n                <div class=\"form-control\">\n                    <label for=\"username\">Username</label>\n                    <input type=\"text\" id=\"username\" v-model.trim=\"username\" required />\n                    </div>\n\n                <div class=\"form-control\">\n                    <label for=\"password\">Password</label>\n                    <input type=\"password\" id=\"password\" v-model=\"password\" required />\n                    </div>\n\n                <div>\n                    <base-button type=\"submit\">Log In</base-button>\n                    </div>\n            </form>\n            <p v-if=\"loggedInUser.firstName\"> Logged In As:\n                {{ loggedInUser.firstName }}\n                {{ loggedInUser.lastName }}\n                ({{ loggedInUser.role }})\n            </p>\n            <p v-else>\n                Please log in.\n            </p>\n\n        </base-card>\n    </div>\n</template>\n\n<script>\nimport BaseButton from '@/components/UI/BaseButton.vue';\n// Assuming LeafIcon is either globally registered or imported if needed directly\n// import LeafIcon from './LeafIcon.vue'; // If needed\n\nexport default {\n    components: {\n        BaseButton,\n        // LeafIcon // Register if needed and not globally available\n    },\n    data() {\n        // Add a data() method to hold the component's local state\n        return {\n            username: '', // Initialize property for username input\n            password: ''  // Initialize property for password input\n        };\n    },\n    computed: {\n        loggedInUser() {\n            // Make sure this getter returns an object with expected keys even when not logged in,\n            // or handle potential null/undefined values in the template (like the v-if example above)\n            return this.$store.getters['auth/greenhouseUser'] || {}; // Provide default empty object\n        }\n    },\n    methods: {\n        handleLogin() {\n            // This method is called when the form is submitted\n            console.log('Login attempt with:');\n            console.log('Username:', this.username);\n            console.log('Password:', this.password); // In real apps, be careful logging passwords!\n\n            // ** TODO: Implement your actual login logic here **\n            // This typically involves:\n            // 1. Basic validation (e.g., check if fields are empty - though 'required' helps)\n            // 2. Calling a Vuex action or an API service:\n            //    this.$store.dispatch('auth/login', {\n            //        username: this.username,\n            //        password: this.password\n            //    }).then(() => {\n            //        // Redirect on success, e.g., this.$router.push('/dashboard');\n            //    }).catch(error => {\n            //        // Handle login errors (e.g., show an error message)\n            //        console.error(\"Login failed:\", error);\n            //    });\n\n            // Clear fields after attempt (optional)\n            // this.username = '';\n            // this.password = '';\n        },\n\n        // Keeping your existing method if it's still needed\n        someMethod() {\n            const user = this.$store.getters['auth/greenhouseUser'];\n            console.log('Greenhouse User:', user);\n        }\n    }\n}\n</script>\n\n<style scoped>\n.icon {\n    margin-right: 10px;\n}\n\n/* Add some basic styling for the form */\n.form-control {\n    margin: 0.5rem 0;\n}\n\n.form-control label {\n    font-weight: bold;\n    display: block; /* Puts label on its own line */\n    margin-bottom: 0.5rem;\n}\n\n.form-control input {\n    display: block;\n    width: 100%; /* Make input take full width of container */\n    font: inherit;\n    border: 1px solid #ccc;\n    padding: 0.15rem;\n    box-sizing: border-box; /* Include padding/border in width */\n}\n\n.form-control input:focus {\n    border-color: #3d008d;\n    background-color: #faf6ff;\n    outline: none;\n}\n</style>\n"],"mappings":";;EAUqBA,KAAK,EAAC;AAAc;;EAKpBA,KAAK,EAAC;AAAc;;EAfzCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;;;uBACIC,mBAAA,CAiCM,cAhCFC,YAAA,CA+BYC,oBAAA;IAjCpBC,OAAA,EAAAC,QAAA,CAGY,MAIK,CAJLC,mBAAA,CAIK,aAHDJ,YAAA,CAEcK,sBAAA;MAFDC,KAA6B,EAA7B;QAAA;MAAA;IAA6B;MAJ1DJ,OAAA,EAAAC,QAAA,CAI4D,MAAmD,CAAnDH,YAAA,CAAmDO,oBAAA;QAAxCC,SAAS,EAAC,IAAI;QAACX,KAAK,EAAC;oCAJ5FY,gBAAA,CAI+G,eAE/F,G;MANhBC,CAAA;oCAOiBN,mBAAA,CAAI,sCAETA,mBAAA,CAcO;MAdAO,QAAM,EAAAC,MAAA,QAAAA,MAAA,MATzBC,cAAA,KAAAC,IAAA,KASmCC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;QAC9BV,mBAAA,CAGU,OAHVa,UAGU,G,0BAFNb,mBAAA,CAAsC;MAA/Bc,GAAG,EAAC;IAAU,GAAC,UAAQ,sB,gBAC9Bd,mBAAA,CAAoE;MAA7De,IAAI,EAAC,MAAM;MAACC,EAAE,EAAC,UAAU;MAZpD,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAYmEC,KAAA,CAAAC,QAAQ,GAAAF,MAAA;MAAEG,QAAQ,EAAR;mDAAVF,KAAA,CAAAC,QAAQ,E;MAAdE,IAAI,EAAZ;IAAuB,E,MAG5DrB,mBAAA,CAGU,OAHVsB,UAGU,G,0BAFNtB,mBAAA,CAAsC;MAA/Bc,GAAG,EAAC;IAAU,GAAC,UAAQ,sB,gBAC9Bd,mBAAA,CAAmE;MAA5De,IAAI,EAAC,UAAU;MAACC,EAAE,EAAC,UAAU;MAjBxD,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAiBkEC,KAAA,CAAAK,QAAQ,GAAAN,MAAA;MAAEG,QAAQ,EAAR;mDAAVF,KAAA,CAAAK,QAAQ,E,KAG1DvB,mBAAA,CAEU,cADNJ,YAAA,CAA+CK,sBAAA;MAAlCc,IAAI,EAAC;IAAQ;MArB9CjB,OAAA,EAAAC,QAAA,CAqB+C,MAAMS,MAAA,QAAAA,MAAA,OArBrDH,gBAAA,CAqB+C,QAAM,E;MArBrDC,CAAA;qCAwBqBK,QAAA,CAAAa,YAAY,CAACC,SAAS,I,cAA/B9B,mBAAA,CAII,KA5BhB+B,UAAA,EAwB6C,iBAC7B,GAAAC,gBAAA,CAAGhB,QAAA,CAAAa,YAAY,CAACC,SAAS,IAAG,GAC5B,GAAAE,gBAAA,CAAGhB,QAAA,CAAAa,YAAY,CAACI,QAAQ,IAAG,IAC1B,GAAAD,gBAAA,CAAGhB,QAAA,CAAAa,YAAY,CAACK,IAAI,IAAG,IAC5B,oB,cACAlC,mBAAA,CAEI,KA/BhBmC,UAAA,EA6BsB,kBAEV,G;IA/BZxB,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}