{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"ping-indicator\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    class: \"segment segment-red\",\n    style: _normalizeStyle({\n      width: $options.redPercentage + '%'\n    })\n  }, null, 4 /* STYLE */), _createElementVNode(\"div\", {\n    class: \"segment segment-orange\",\n    style: _normalizeStyle({\n      marginLeft: $options.redPercentage + '%'\n    })\n  }, null, 4 /* STYLE */), _createElementVNode(\"div\", {\n    class: \"segment segment-green\",\n    style: _normalizeStyle({\n      marginLeft: $options.redPercentage + $options.orangePercentage + '%'\n    })\n  }, null, 4 /* STYLE */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","style","_normalizeStyle","width","$options","redPercentage","marginLeft","orangePercentage"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/components/UI/SensorFreqGauge.vue"],"sourcesContent":["<template>\n    <div class=\"ping-indicator\">\n      <div\n        class=\"segment segment-red\"\n        :style=\"{ width: redPercentage + '%' }\"\n      ></div>\n      <div\n        class=\"segment segment-orange\"\n        :style=\"{ marginLeft: redPercentage + '%' }\"\n      ></div>\n      <div\n        class=\"segment segment-green\"\n        :style=\"{ marginLeft: redPercentage + orangePercentage + '%' }\"\n      ></div>\n    </div>\n  </template>\n  \n  <script>\n  import { computed } from 'vue';\n  \n  export default {\n    name: 'PingIndicator',\n    props: {\n      successfulPings: {\n        type: Number,\n        required: true,\n      },\n      totalExpectedPings: {\n        type: Number,\n        required: true,\n      },\n    },\n    computed: {\n      pingPercentage() {\n        if (this.totalExpectedPings === 0) {\n          return 0;\n        }\n        return (this.successfulPings / this.totalExpectedPings) * 100;\n      },\n      redPercentage() {\n          const threshold = 0.85; // 85%\n          return Math.max(0, Math.min(100, (threshold * 100) - this.pingPercentage));\n      },\n      orangePercentage() {\n          const startThreshold = 0.90; // 90%\n          const endThreshold = 0.95;   // 95%\n          const start = startThreshold * 100;\n          const end = endThreshold * 100;\n  \n          if (this.pingPercentage >= start && this.pingPercentage <= end) {\n              return end - this.pingPercentage;\n          } else if (this.pingPercentage < start) {\n              return end - start;\n          } else {\n              return 0;\n          }\n      },\n      greenPercentage() {\n          return Math.max(0, this.pingPercentage - (0.95 * 100));\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .ping-indicator {\n    display: flex;\n    width: 300px; /* Adjust as needed */\n    height: 30px;  /* Adjust as needed */\n    border: 1px solid #ccc; /* Optional border */\n  }\n  \n  .segment {\n    height: 100%;\n  }\n  \n  .segment-red {\n    background-color: red;\n  }\n  \n  .segment-orange {\n    background-color: orange;\n  }\n  \n  .segment-green {\n    background-color: green;\n  }\n  </style>"],"mappings":";;EACSA,KAAK,EAAC;AAAgB;;uBAA3BC,mBAAA,CAaM,OAbNC,UAaM,GAZJC,mBAAA,CAGO;IAFLH,KAAK,EAAC,qBAAqB;IAC1BI,KAAK,EAJdC,eAAA;MAAAC,KAAA,EAIyBC,QAAA,CAAAC,aAAa;IAAA;2BAEhCL,mBAAA,CAGO;IAFLH,KAAK,EAAC,wBAAwB;IAC7BI,KAAK,EARdC,eAAA;MAAAI,UAAA,EAQ8BF,QAAA,CAAAC,aAAa;IAAA;2BAErCL,mBAAA,CAGO;IAFLH,KAAK,EAAC,uBAAuB;IAC5BI,KAAK,EAZdC,eAAA;MAAAI,UAAA,EAY8BF,QAAA,CAAAC,aAAa,GAAGD,QAAA,CAAAG,gBAAgB;IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}