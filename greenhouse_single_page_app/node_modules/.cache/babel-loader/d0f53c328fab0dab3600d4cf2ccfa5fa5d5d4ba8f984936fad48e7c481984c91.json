{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"circular-dial\"\n};\nconst _hoisted_2 = {\n  width: \"120\",\n  height: \"120\",\n  viewBox: \"0 0 200 200\"\n};\nconst _hoisted_3 = {\n  x: \"100\",\n  y: \"105\",\n  \"text-anchor\": \"middle\",\n  \"dominant-baseline\": \"middle\",\n  \"font-family\": \"sans-serif\",\n  \"font-size\": \"40\",\n  \"font-weight\": \"bold\",\n  fill: \"grey\",\n  opacity: \"0.8\"\n};\nconst _hoisted_4 = [\"d\"];\nconst _hoisted_5 = [\"d\"];\nconst _hoisted_6 = [\"d\"];\nconst _hoisted_7 = [\"d\"];\nconst _hoisted_8 = [\"d\"];\nconst _hoisted_9 = [\"transform\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"span\", _hoisted_1, [(_openBlock(), _createElementBlock(\"svg\", _hoisted_2, [_createElementVNode(\"text\", _hoisted_3, _toDisplayString($props.title), 1 /* TEXT */), _createElementVNode(\"path\", {\n    d: $options.greenArc,\n    fill: \"green\",\n    stroke: \"none\"\n  }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"path\", {\n    d: $options.amberArcClockwise,\n    fill: \"orange\",\n    stroke: \"none\",\n    \"stroke-width\": \"25\"\n  }, null, 8 /* PROPS */, _hoisted_5), _createElementVNode(\"path\", {\n    d: $options.amberArcCounterClockwise,\n    fill: \"orange\",\n    stroke: \"none\",\n    \"stroke-width\": \"25\"\n  }, null, 8 /* PROPS */, _hoisted_6), _createElementVNode(\"path\", {\n    d: $options.redArcClockwise,\n    fill: \"red\",\n    stroke: \"none\",\n    \"stroke-width\": \"25\"\n  }, null, 8 /* PROPS */, _hoisted_7), _createElementVNode(\"path\", {\n    d: $options.redArcCounterClockwise,\n    fill: \"red\",\n    stroke: \"none\",\n    \"stroke-width\": \"25\"\n  }, null, 8 /* PROPS */, _hoisted_8), _createElementVNode(\"path\", {\n    d: \"M 0 -80 L -4 -15 L 0 0 L 4 -15 Z\",\n    fill: \"currentColor\",\n    stroke: \"black\",\n    \"stroke-width\": \"2\",\n    transform: $options.needleTransform\n  }, null, 8 /* PROPS */, _hoisted_9)])), _createElementVNode(\"p\", null, \"Current \" + _toDisplayString($props.title) + \": \" + _toDisplayString($props.currentCondition !== null ? $props.currentCondition.toFixed(1) : 'N/A'), 1 /* TEXT */), _createElementVNode(\"p\", null, \"lower limit: \" + _toDisplayString($options.greenLowLimit.toFixed(1)), 1 /* TEXT */), _createElementVNode(\"p\", null, \"upper limit: \" + _toDisplayString($options.greenUpLimit.toFixed(1)), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["class","width","height","viewBox","x","y","fill","opacity","_createElementBlock","_hoisted_1","_hoisted_2","_createElementVNode","_hoisted_3","_toDisplayString","$props","title","d","$options","greenArc","stroke","_hoisted_4","amberArcClockwise","_hoisted_5","amberArcCounterClockwise","_hoisted_6","redArcClockwise","_hoisted_7","redArcCounterClockwise","_hoisted_8","transform","needleTransform","_hoisted_9","currentCondition","toFixed","greenLowLimit","greenUpLimit"],"sources":["/home/alex/dev/GreenHouse/flaskapp/greenhouse_single_page_app/src/components/greenhouse/TheCircularDial.vue"],"sourcesContent":["<template>\n    <span class=\"circular-dial\">\n        <svg width=\"120\" height=\"120\" viewBox=\"0 0 200 200\">\n            <text\n                x=\"100\"\n                y=\"105\" text-anchor=\"middle\"\n                dominant-baseline=\"middle\"\n                font-family=\"sans-serif\"\n                font-size=\"40\" font-weight=\"bold\"\n                fill=\"grey\"\n                opacity=\"0.8\" >\n                {{ title }}\n            </text>\n            <path :d=\"greenArc\" fill=\"green\" stroke=\"none\" />\n            <path :d=\"amberArcClockwise\" fill=\"orange\" stroke=\"none\" stroke-width=\"25\" />\n            <path :d=\"amberArcCounterClockwise\" fill=\"orange\" stroke=\"none\" stroke-width=\"25\" />\n            <path :d=\"redArcClockwise\" fill=\"red\" stroke=\"none\" stroke-width=\"25\" />\n            <path :d=\"redArcCounterClockwise\" fill=\"red\" stroke=\"none\" stroke-width=\"25\" />\n\n            <path d=\"M 0 -80 L -4 -15 L 0 0 L 4 -15 Z\" fill=\"currentColor\" stroke=\"black\" stroke-width=\"2\" :transform=\"needleTransform\" />\n        </svg>\n\n        <p>Current {{ title }}: {{ currentCondition !== null ? currentCondition.toFixed(1) : 'N/A' }}</p>\n        <p>lower limit: {{ greenLowLimit.toFixed(1) }}</p>\n        <p>upper limit: {{ greenUpLimit.toFixed(1) }}</p>\n        \n    </span>\n</template>\n\n<script>\nexport default {\n    props: {\n        greenLowerLimit: {\n            type: Number,\n            required: true,\n        },\n        greenUpperLimit: {\n            type: Number,\n            required: true,\n        },\n        zoneDegrees: {\n            type: Array,\n            required: false,\n        },\n        currentCondition: {\n            type: Number,\n            required: false,\n            default: null\n        },\n        title: {\n            type: String,\n            required: true,\n            validator: function (value) {\n                // Optional: Ensure only valid titles are passed\n                return ['VPD', 'CO²', '°C'].includes(value);\n            }\n        }\n    },\n    computed: {\n        unitsPerDegree() {\n            const unitsPerDegree = (this.greenUpperLimit - this.greenLowerLimit) / this.sumZoneDegrees;\n            return unitsPerDegree;\n        },\n        sumZoneDegrees() {\n            return this.zoneDegrees.reduce((sum, val) => sum + val, 0);\n        },\n        greenLowLimit() {\n            return this.greenLowerLimit;\n        },\n        greenUpLimit() {\n            return this.greenUpperLimit;\n        },\n        amberLowerLimit() {\n            const amberZone = this.unitsPerDegree * this.zoneDegrees[1];\n            return this.greenLowerLimit - amberZone;\n        },\n        amberUpperLimit() {\n            const amberZone = this.unitsPerDegree * this.zoneDegrees[1];\n            return this.greenUpperLimit + amberZone;\n        },\n        redLowerLimit() {\n            const redZone = this.unitsPerDegree * this.zoneDegrees[2];\n            return this.amberLowerLimit - redZone;\n        },\n        redUpperLimit() {\n            const redZone = this.unitsPerDegree * this.zoneDegrees[2];\n            return this.amberUpperLimit + redZone;\n        },\n        baseArc() {\n            const centerX = 100;\n            const centerY = 100;\n            const radius = 80;\n            const startAngle = -150;\n            const endAngle = 150;\n            return this.describeArc(centerX, centerY, radius, startAngle, endAngle);\n        },\n        greenArc() {\n            const centerX = 100;\n            const centerY = 100;\n            const radiusOuter = 80;\n            const radiusInner = 80 - 25;\n            const startAngle = -this.zoneDegrees[0] / 2;\n            const endAngle = this.zoneDegrees[0] / 2;\n            return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle);\n        },\n        amberArcClockwise() {\n            const centerX = 100;\n            const centerY = 100;\n            const radiusOuter = 80;\n            const radiusInner = 80 - 25;\n            const startAngle = this.zoneDegrees[0] / 2;\n            const endAngle = startAngle + this.zoneDegrees[1];\n            return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle);\n        },\n        amberArcCounterClockwise() {\n            const centerX = 100;\n            const centerY = 100;\n            const radiusOuter = 80;\n            const radiusInner = 80 - 25;\n            const startAngle = -this.zoneDegrees[0] / 2;\n            const endAngle = startAngle - this.zoneDegrees[1];\n            return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle, true);\n        },\n        redArcClockwise() {\n            const centerX = 100;\n            const centerY = 100;\n            const radiusOuter = 80;\n            const radiusInner = 80 - 25;\n            const startAngle = this.zoneDegrees[0] / 2 + this.zoneDegrees[1];\n            const endAngle = startAngle + this.zoneDegrees[2];\n            return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle);\n        },\n        redArcCounterClockwise() {\n            const centerX = 100;\n            const centerY = 100;\n            const radiusOuter = 80;\n            const radiusInner = 80 - 25;\n            const startAngle = -this.zoneDegrees[0] / 2 - this.zoneDegrees[1];\n            const endAngle = startAngle - this.zoneDegrees[2];\n            return this.describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle, true);\n        },\n        needleTransform() {\n            const rotation = this.calculateNeedleRotation();\n            return `translate(100, 100) rotate(${rotation}) translate(0, 15)`;\n        },\n    },\n    methods: {\n        polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n            const angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n            return {\n                x: centerX + (radius * Math.cos(angleInRadians)),\n                y: centerY + (radius * Math.sin(angleInRadians))\n            };\n        },\n        describeArc(x, y, radius, startAngle, endAngle) {\n            const start = this.polarToCartesian(x, y, radius, endAngle);\n            const end = this.polarToCartesian(x, y, radius, startAngle);\n            const largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n            const d = [\n                \"M\", start.x, start.y,\n                \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y\n            ].join(\" \");\n            return d;\n        },\n        describeFilledArc(centerX, centerY, radiusOuter, radiusInner, startAngle, endAngle, isCounterClockwise = false) {\n            let startOuter, endOuter, startInner, endInner;\n            const largeArcFlag = Math.abs(endAngle - startAngle) <= 180 ? \"0\" : \"1\";\n            const outerSweepFlag = !isCounterClockwise ? \"1\" : \"0\"; // Clockwise: 1, Counter-Clockwise: 0\n            const innerSweepFlag = !isCounterClockwise ? \"0\" : \"1\"; // Clockwise: 0, Counter-Clockwise: 1\n\n            if (isCounterClockwise) {\n                startOuter = this.polarToCartesian(centerX, centerY, radiusOuter, startAngle);\n                endOuter = this.polarToCartesian(centerX, centerY, radiusOuter, endAngle);\n                startInner = this.polarToCartesian(centerX, centerY, radiusInner, startAngle);\n                endInner = this.polarToCartesian(centerX, centerY, radiusInner, endAngle);\n            } else {\n                // Correcting the order of startAngle and endAngle for clockwise\n                startOuter = this.polarToCartesian(centerX, centerY, radiusOuter, startAngle);\n                endOuter = this.polarToCartesian(centerX, centerY, radiusOuter, endAngle);\n                startInner = this.polarToCartesian(centerX, centerY, radiusInner, startAngle);\n                endInner = this.polarToCartesian(centerX, centerY, radiusInner, endAngle);\n            }\n\n            const d = [\n                \"M\", startOuter.x, startOuter.y,\n                \"A\", radiusOuter, radiusOuter, 0, largeArcFlag, outerSweepFlag, endOuter.x, endOuter.y,\n                \"L\", endInner.x, endInner.y,\n                \"A\", radiusInner, radiusInner, 0, largeArcFlag, innerSweepFlag, startInner.x, startInner.y,\n                \"Z\"\n            ].join(\" \");\n            return d;\n        },\n        calculateNeedleRotation() {\n            const lowerLimit = this.greenLowerLimit;\n            const upperLimit = this.greenUpperLimit;\n            const current = this.currentCondition;\n            const greenDegrees = this.zoneDegrees[0];\n            \n\n            // Map the current value to the green zone range (-greenDegrees/2 to greenDegrees/2)\n            const percentage = (current - lowerLimit) / (upperLimit - lowerLimit);\n            const rotation = (percentage-0.5) * greenDegrees; // Subtract 0.5 to center around 12 o'clock\n            \n\n            return rotation;\n        },\n    }\n}\n</script>\n\n<style scoped>\n.circular-dial {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.circular-dial p {\n    font-size: 0.5em; /* Adjusted font size for better readability */\n    margin: 5px 0;\n}\n</style>\n"],"mappings":";;EACUA,KAAK,EAAC;AAAe;;EAClBC,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC,KAAK;EAACC,OAAO,EAAC;;;EAE9BC,CAAC,EAAC,KAAK;EACPC,CAAC,EAAC,KAAK;EAAC,aAAW,EAAC,QAAQ;EAC5B,mBAAiB,EAAC,QAAQ;EAC1B,aAAW,EAAC,YAAY;EACxB,WAAS,EAAC,IAAI;EAAC,aAAW,EAAC,MAAM;EACjCC,IAAI,EAAC,MAAM;EACXC,OAAO,EAAC;;mBAVxB;mBAAA;mBAAA;mBAAA;mBAAA;mBAAA;;uBACIC,mBAAA,CAyBO,QAzBPC,UAyBO,I,cAxBHD,mBAAA,CAkBM,OAlBNE,UAkBM,GAjBFC,mBAAA,CASO,QATPC,UASO,EAAAC,gBAAA,CADAC,MAAA,CAAAC,KAAK,kBAEZJ,mBAAA,CAAiD;IAA1CK,CAAC,EAAEC,QAAA,CAAAC,QAAQ;IAAEZ,IAAI,EAAC,OAAO;IAACa,MAAM,EAAC;0BAbpDC,UAAA,GAcYT,mBAAA,CAA6E;IAAtEK,CAAC,EAAEC,QAAA,CAAAI,iBAAiB;IAAEf,IAAI,EAAC,QAAQ;IAACa,MAAM,EAAC,MAAM;IAAC,cAAY,EAAC;0BAdlFG,UAAA,GAeYX,mBAAA,CAAoF;IAA7EK,CAAC,EAAEC,QAAA,CAAAM,wBAAwB;IAAEjB,IAAI,EAAC,QAAQ;IAACa,MAAM,EAAC,MAAM;IAAC,cAAY,EAAC;0BAfzFK,UAAA,GAgBYb,mBAAA,CAAwE;IAAjEK,CAAC,EAAEC,QAAA,CAAAQ,eAAe;IAAEnB,IAAI,EAAC,KAAK;IAACa,MAAM,EAAC,MAAM;IAAC,cAAY,EAAC;0BAhB7EO,UAAA,GAiBYf,mBAAA,CAA+E;IAAxEK,CAAC,EAAEC,QAAA,CAAAU,sBAAsB;IAAErB,IAAI,EAAC,KAAK;IAACa,MAAM,EAAC,MAAM;IAAC,cAAY,EAAC;0BAjBpFS,UAAA,GAmBYjB,mBAAA,CAA8H;IAAxHK,CAAC,EAAC,kCAAkC;IAACV,IAAI,EAAC,cAAc;IAACa,MAAM,EAAC,OAAO;IAAC,cAAY,EAAC,GAAG;IAAEU,SAAS,EAAEZ,QAAA,CAAAa;0BAnBvHC,UAAA,E,IAsBQpB,mBAAA,CAAiG,WAA9F,UAAQ,GAAAE,gBAAA,CAAGC,MAAA,CAAAC,KAAK,IAAG,IAAE,GAAAF,gBAAA,CAAGC,MAAA,CAAAkB,gBAAgB,YAAYlB,MAAA,CAAAkB,gBAAgB,CAACC,OAAO,6BAC/EtB,mBAAA,CAAkD,WAA/C,eAAa,GAAAE,gBAAA,CAAGI,QAAA,CAAAiB,aAAa,CAACD,OAAO,qBACxCtB,mBAAA,CAAiD,WAA9C,eAAa,GAAAE,gBAAA,CAAGI,QAAA,CAAAkB,YAAY,CAACF,OAAO,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}