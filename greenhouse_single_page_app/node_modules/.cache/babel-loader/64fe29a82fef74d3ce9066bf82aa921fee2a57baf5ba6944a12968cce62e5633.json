{"ast":null,"code":"export default {\n  props: {\n    modelValue: {\n      type: String,\n      default: 'closed',\n      validator: value => ['closed', 'half', 'open'].includes(value)\n    }\n  },\n  emits: ['update:modelValue'],\n  data() {\n    return {\n      positions: ['closed', 'half', 'open']\n    };\n  },\n  computed: {\n    currentIndex() {\n      const initialIndex = this.positions.indexOf(this.modelValue);\n      return initialIndex !== -1 ? initialIndex : 0;\n    },\n    currentPositionClass() {\n      return `position-${this.positions[this.currentIndex]}`;\n    },\n    simplifiedSliderStyle() {\n      const sliderWidth = 26; // Fixed slider width\n      const containerWidth = 90; // Fixed container width\n      const step = (containerWidth - sliderWidth) / (this.positions.length - 1);\n      const translateX = this.currentIndex * step;\n      return {\n        transform: `translateX(${translateX}px)`\n      };\n    }\n  },\n  methods: {\n    cyclePosition() {\n      this.currentIndex = (this.currentIndex + 1) % this.positions.length;\n      this.$emit('update:modelValue', this.positions[this.currentIndex]);\n    }\n  }\n};","map":{"version":3,"names":["props","modelValue","type","String","default","validator","value","includes","emits","data","positions","computed","currentIndex","initialIndex","indexOf","currentPositionClass","simplifiedSliderStyle","sliderWidth","containerWidth","step","length","translateX","transform","methods","cyclePosition","$emit"],"sources":["/home/alex/dev/GreenHouse/greenhouse_single_page_app/src/components/UI/WindowActuatorToggle.vue"],"sourcesContent":["<template>\n    <div class=\"three-position-toggle\" @click=\"cyclePosition\">\n      <div class=\"switch-container\" :class=\"currentPositionClass\">\n        <span class=\"label closed-label\">Closed</span>\n        <div class=\"slider\" :style=\"simplifiedSliderStyle\"></div>\n        <span class=\"label half-label\">Half</span>\n        <span class=\"label open-label\">Open</span>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    props: {\n      modelValue: {\n        type: String,\n        default: 'closed',\n        validator: (value) => ['closed', 'half', 'open'].includes(value),\n      },\n    },\n    emits: ['update:modelValue'],\n    data() {\n      return {\n        positions: ['closed', 'half', 'open'],\n      };\n    },\n    computed: {\n      currentIndex() {\n        const initialIndex = this.positions.indexOf(this.modelValue);\n        return initialIndex !== -1 ? initialIndex : 0;\n      },\n      currentPositionClass() {\n        return `position-${this.positions[this.currentIndex]}`;\n      },\n      simplifiedSliderStyle() {\n        const sliderWidth = 26; // Fixed slider width\n        const containerWidth = 90; // Fixed container width\n        const step = (containerWidth - sliderWidth) / (this.positions.length - 1);\n        const translateX = this.currentIndex * step;\n        return { transform: `translateX(${translateX}px)` };\n      },\n    },\n    methods: {\n      cyclePosition() {\n        this.currentIndex = (this.currentIndex + 1) % this.positions.length;\n        this.$emit('update:modelValue', this.positions[this.currentIndex]);\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .three-position-toggle {\n    display: inline-block;\n    cursor: pointer;\n  }\n  \n  .switch-container {\n    position: relative;\n    width: 90px; /* Fixed width */\n    height: 30px;\n    background-color: #ccc;\n    border-radius: 15px;\n    overflow: hidden;\n    transition: background-color 0.3s ease;\n  }\n  \n  .position-closed {\n    background-color: #f44336; /* Red for \"Closed\" */\n  }\n  \n  .position-half {\n    background-color: #800080; /* Purple for \"Half\" */\n  }\n  \n  .position-open {\n    background-color: #2196f3; /* Blue for \"Open\" */\n  }\n  \n  .label {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    color: #fff;\n    font-size: 0.7em;\n    font-weight: bold;\n    user-select: none;\n    white-space: nowrap;\n  }\n  \n  .closed-label {\n    left: 5px;\n  }\n  \n  .half-label {\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n  \n  .open-label {\n    right: 5px;\n  }\n  \n  .slider {\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    width: 26px; /* Fixed width */\n    height: 26px;\n    background-color: #fff;\n    border-radius: 50%;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n    transition: transform 0.3s ease;\n  }\n  </style>"],"mappings":"AAYE,eAAe;EACbA,KAAK,EAAE;IACLC,UAAU,EAAE;MACVC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE,QAAQ;MACjBC,SAAS,EAAGC,KAAK,IAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACD,KAAK;IACjE;EACF,CAAC;EACDE,KAAK,EAAE,CAAC,mBAAmB,CAAC;EAC5BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM;IACtC,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,MAAMC,YAAW,GAAI,IAAI,CAACH,SAAS,CAACI,OAAO,CAAC,IAAI,CAACb,UAAU,CAAC;MAC5D,OAAOY,YAAW,KAAM,CAAC,IAAIA,YAAW,GAAI,CAAC;IAC/C,CAAC;IACDE,oBAAoBA,CAAA,EAAG;MACrB,OAAO,YAAY,IAAI,CAACL,SAAS,CAAC,IAAI,CAACE,YAAY,CAAC,EAAE;IACxD,CAAC;IACDI,qBAAqBA,CAAA,EAAG;MACtB,MAAMC,WAAU,GAAI,EAAE,EAAE;MACxB,MAAMC,cAAa,GAAI,EAAE,EAAE;MAC3B,MAAMC,IAAG,GAAI,CAACD,cAAa,GAAID,WAAW,KAAK,IAAI,CAACP,SAAS,CAACU,MAAK,GAAI,CAAC,CAAC;MACzE,MAAMC,UAAS,GAAI,IAAI,CAACT,YAAW,GAAIO,IAAI;MAC3C,OAAO;QAAEG,SAAS,EAAE,cAAcD,UAAU;MAAM,CAAC;IACrD;EACF,CAAC;EACDE,OAAO,EAAE;IACPC,aAAaA,CAAA,EAAG;MACd,IAAI,CAACZ,YAAW,GAAI,CAAC,IAAI,CAACA,YAAW,GAAI,CAAC,IAAI,IAAI,CAACF,SAAS,CAACU,MAAM;MACnE,IAAI,CAACK,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAACf,SAAS,CAAC,IAAI,CAACE,YAAY,CAAC,CAAC;IACpE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}